/// Generated by the Protocol Buffers 3.5.1 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "message.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct MessageRoot {
    public static let `default` = MessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RootRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}



//Enum type declaration start 

public enum EnumMsgContentType:Int32, GeneratedEnum {
    case enumMsgContentTypeText = 0
    case enumMsgContentTypeImage = 1
    case enumMsgContentTypeSound = 2
    case enumMsgContentTypeLocation = 3
    case enumMsgContentTypeVideo = 4
    case enumMsgContentTypeExpression = 5
    case enumMsgContentTypeCustom = 6
    public func toString() -> String {
        switch self {
        case .enumMsgContentTypeText: return "enum_msg_content_type_text"
        case .enumMsgContentTypeImage: return "enum_msg_content_type_image"
        case .enumMsgContentTypeSound: return "enum_msg_content_type_sound"
        case .enumMsgContentTypeLocation: return "enum_msg_content_type_location"
        case .enumMsgContentTypeVideo: return "enum_msg_content_type_video"
        case .enumMsgContentTypeExpression: return "enum_msg_content_type_expression"
        case .enumMsgContentTypeCustom: return "enum_msg_content_type_custom"
        }
    }
    public static func fromString(_ str:String) throws -> EnumMsgContentType {
        switch str {
        case "enum_msg_content_type_text":    return .enumMsgContentTypeText
        case "enum_msg_content_type_image":    return .enumMsgContentTypeImage
        case "enum_msg_content_type_sound":    return .enumMsgContentTypeSound
        case "enum_msg_content_type_location":    return .enumMsgContentTypeLocation
        case "enum_msg_content_type_video":    return .enumMsgContentTypeVideo
        case "enum_msg_content_type_expression":    return .enumMsgContentTypeExpression
        case "enum_msg_content_type_custom":    return .enumMsgContentTypeCustom
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .enumMsgContentTypeText: return ".enumMsgContentTypeText"
        case .enumMsgContentTypeImage: return ".enumMsgContentTypeImage"
        case .enumMsgContentTypeSound: return ".enumMsgContentTypeSound"
        case .enumMsgContentTypeLocation: return ".enumMsgContentTypeLocation"
        case .enumMsgContentTypeVideo: return ".enumMsgContentTypeVideo"
        case .enumMsgContentTypeExpression: return ".enumMsgContentTypeExpression"
        case .enumMsgContentTypeCustom: return ".enumMsgContentTypeCustom"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:EnumMsgContentType, rhs:EnumMsgContentType) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 

final public class MsgTextContent : GeneratedMessage {
    public typealias BuilderType = MsgTextContent.Builder

    public static func == (lhs: MsgTextContent, rhs: MsgTextContent) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var text:String! = nil
    public fileprivate(set) var hasText:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasText {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MsgTextContent.self): field \"text\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasText {
            try codedOutputStream.writeString(fieldNumber: 1, value:text)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasText {
            serialize_size += text.computeStringSize(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> MsgTextContent.Builder {
        return MsgTextContent.classBuilder() as! MsgTextContent.Builder
    }
    public func getBuilder() -> MsgTextContent.Builder {
        return classBuilder() as! MsgTextContent.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgTextContent.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgTextContent.Builder()
    }
    public func toBuilder() throws -> MsgTextContent.Builder {
        return try MsgTextContent.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:MsgTextContent) throws -> MsgTextContent.Builder {
        return try MsgTextContent.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasText {
            jsonMap["text"] = text
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> MsgTextContent {
        return try MsgTextContent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> MsgTextContent {
        return try MsgTextContent.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasText {
            output += "\(indent) text: \(text) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasText {
                hashCode = (hashCode &* 31) &+ text.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "MsgTextContent"
    }
    override public func className() -> String {
        return "MsgTextContent"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:MsgTextContent = MsgTextContent()
        public func getMessage() -> MsgTextContent {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var text:String {
            get {
                return builderResult.text
            }
            set (value) {
                builderResult.hasText = true
                builderResult.text = value
            }
        }
        public var hasText:Bool {
            get {
                return builderResult.hasText
            }
        }
        @discardableResult
        public func setText(_ value:String) -> MsgTextContent.Builder {
            self.text = value
            return self
        }
        @discardableResult
        public func clearText() -> MsgTextContent.Builder{
            builderResult.hasText = false
            builderResult.text = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> MsgTextContent.Builder {
            builderResult = MsgTextContent()
            return self
        }
        override public func clone() throws -> MsgTextContent.Builder {
            return try MsgTextContent.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> MsgTextContent {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> MsgTextContent {
            let returnMe:MsgTextContent = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:MsgTextContent) throws -> MsgTextContent.Builder {
            if other == MsgTextContent() {
                return self
            }
            if other.hasText {
                text = other.text
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> MsgTextContent.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgTextContent.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    text = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> MsgTextContent.Builder {
            let resultDecodedBuilder = MsgTextContent.Builder()
            if let jsonValueText = jsonMap["text"] as? String {
                resultDecodedBuilder.text = jsonValueText
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> MsgTextContent.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try MsgTextContent.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class MsgImgContent : GeneratedMessage {
    public typealias BuilderType = MsgImgContent.Builder

    public static func == (lhs: MsgImgContent, rhs: MsgImgContent) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasImgUrl == rhs.hasImgUrl) && (!lhs.hasImgUrl || lhs.imgUrl == rhs.imgUrl)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var imgUrl:String! = nil
    public fileprivate(set) var hasImgUrl:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasImgUrl {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MsgImgContent.self): field \"imgUrl\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasImgUrl {
            try codedOutputStream.writeString(fieldNumber: 1, value:imgUrl)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasImgUrl {
            serialize_size += imgUrl.computeStringSize(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> MsgImgContent.Builder {
        return MsgImgContent.classBuilder() as! MsgImgContent.Builder
    }
    public func getBuilder() -> MsgImgContent.Builder {
        return classBuilder() as! MsgImgContent.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgImgContent.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgImgContent.Builder()
    }
    public func toBuilder() throws -> MsgImgContent.Builder {
        return try MsgImgContent.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:MsgImgContent) throws -> MsgImgContent.Builder {
        return try MsgImgContent.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasImgUrl {
            jsonMap["imgUrl"] = imgUrl
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> MsgImgContent {
        return try MsgImgContent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> MsgImgContent {
        return try MsgImgContent.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasImgUrl {
            output += "\(indent) imgUrl: \(imgUrl) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasImgUrl {
                hashCode = (hashCode &* 31) &+ imgUrl.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "MsgImgContent"
    }
    override public func className() -> String {
        return "MsgImgContent"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:MsgImgContent = MsgImgContent()
        public func getMessage() -> MsgImgContent {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var imgUrl:String {
            get {
                return builderResult.imgUrl
            }
            set (value) {
                builderResult.hasImgUrl = true
                builderResult.imgUrl = value
            }
        }
        public var hasImgUrl:Bool {
            get {
                return builderResult.hasImgUrl
            }
        }
        @discardableResult
        public func setImgUrl(_ value:String) -> MsgImgContent.Builder {
            self.imgUrl = value
            return self
        }
        @discardableResult
        public func clearImgUrl() -> MsgImgContent.Builder{
            builderResult.hasImgUrl = false
            builderResult.imgUrl = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> MsgImgContent.Builder {
            builderResult = MsgImgContent()
            return self
        }
        override public func clone() throws -> MsgImgContent.Builder {
            return try MsgImgContent.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> MsgImgContent {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> MsgImgContent {
            let returnMe:MsgImgContent = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:MsgImgContent) throws -> MsgImgContent.Builder {
            if other == MsgImgContent() {
                return self
            }
            if other.hasImgUrl {
                imgUrl = other.imgUrl
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> MsgImgContent.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgImgContent.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    imgUrl = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> MsgImgContent.Builder {
            let resultDecodedBuilder = MsgImgContent.Builder()
            if let jsonValueImgUrl = jsonMap["imgUrl"] as? String {
                resultDecodedBuilder.imgUrl = jsonValueImgUrl
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> MsgImgContent.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try MsgImgContent.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class LocationInfo : GeneratedMessage {
    public typealias BuilderType = LocationInfo.Builder

    public static func == (lhs: LocationInfo, rhs: LocationInfo) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasLat == rhs.hasLat) && (!lhs.hasLat || lhs.lat == rhs.lat)
        fieldCheck = fieldCheck && (lhs.hasLon == rhs.hasLon) && (!lhs.hasLon || lhs.lon == rhs.lon)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var lat:Double! = nil
    public fileprivate(set) var hasLat:Bool = false

    public fileprivate(set) var lon:Double! = nil
    public fileprivate(set) var hasLon:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasLat {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(LocationInfo.self): field \"lat\" mark required")
        }
        if !hasLon {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(LocationInfo.self): field \"lon\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasLat {
            try codedOutputStream.writeDouble(fieldNumber: 1, value:lat)
        }
        if hasLon {
            try codedOutputStream.writeDouble(fieldNumber: 2, value:lon)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasLat {
            serialize_size += lat.computeDoubleSize(fieldNumber: 1)
        }
        if hasLon {
            serialize_size += lon.computeDoubleSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> LocationInfo.Builder {
        return LocationInfo.classBuilder() as! LocationInfo.Builder
    }
    public func getBuilder() -> LocationInfo.Builder {
        return classBuilder() as! LocationInfo.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LocationInfo.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LocationInfo.Builder()
    }
    public func toBuilder() throws -> LocationInfo.Builder {
        return try LocationInfo.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:LocationInfo) throws -> LocationInfo.Builder {
        return try LocationInfo.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasLat {
            jsonMap["lat"] = Double(lat)
        }
        if hasLon {
            jsonMap["lon"] = Double(lon)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> LocationInfo {
        return try LocationInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> LocationInfo {
        return try LocationInfo.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasLat {
            output += "\(indent) lat: \(lat) \n"
        }
        if hasLon {
            output += "\(indent) lon: \(lon) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLat {
                hashCode = (hashCode &* 31) &+ lat.hashValue
            }
            if hasLon {
                hashCode = (hashCode &* 31) &+ lon.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "LocationInfo"
    }
    override public func className() -> String {
        return "LocationInfo"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:LocationInfo = LocationInfo()
        public func getMessage() -> LocationInfo {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var lat:Double {
            get {
                return builderResult.lat
            }
            set (value) {
                builderResult.hasLat = true
                builderResult.lat = value
            }
        }
        public var hasLat:Bool {
            get {
                return builderResult.hasLat
            }
        }
        @discardableResult
        public func setLat(_ value:Double) -> LocationInfo.Builder {
            self.lat = value
            return self
        }
        @discardableResult
        public func clearLat() -> LocationInfo.Builder{
            builderResult.hasLat = false
            builderResult.lat = nil
            return self
        }
        public var lon:Double {
            get {
                return builderResult.lon
            }
            set (value) {
                builderResult.hasLon = true
                builderResult.lon = value
            }
        }
        public var hasLon:Bool {
            get {
                return builderResult.hasLon
            }
        }
        @discardableResult
        public func setLon(_ value:Double) -> LocationInfo.Builder {
            self.lon = value
            return self
        }
        @discardableResult
        public func clearLon() -> LocationInfo.Builder{
            builderResult.hasLon = false
            builderResult.lon = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> LocationInfo.Builder {
            builderResult = LocationInfo()
            return self
        }
        override public func clone() throws -> LocationInfo.Builder {
            return try LocationInfo.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> LocationInfo {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> LocationInfo {
            let returnMe:LocationInfo = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:LocationInfo) throws -> LocationInfo.Builder {
            if other == LocationInfo() {
                return self
            }
            if other.hasLat {
                lat = other.lat
            }
            if other.hasLon {
                lon = other.lon
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> LocationInfo.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LocationInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 9:
                    lat = try codedInputStream.readDouble()

                case 17:
                    lon = try codedInputStream.readDouble()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> LocationInfo.Builder {
            let resultDecodedBuilder = LocationInfo.Builder()
            if let jsonValueLat = jsonMap["lat"] as? Double {
                resultDecodedBuilder.lat = Double(jsonValueLat)
            } else if let jsonValueLat = jsonMap["lat"] as? String {
                resultDecodedBuilder.lat = Double(jsonValueLat)!
            }
            if let jsonValueLon = jsonMap["lon"] as? Double {
                resultDecodedBuilder.lon = Double(jsonValueLon)
            } else if let jsonValueLon = jsonMap["lon"] as? String {
                resultDecodedBuilder.lon = Double(jsonValueLon)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> LocationInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try LocationInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class MsgLocationContent : GeneratedMessage {
    public typealias BuilderType = MsgLocationContent.Builder

    public static func == (lhs: MsgLocationContent, rhs: MsgLocationContent) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasLocation == rhs.hasLocation) && (!lhs.hasLocation || lhs.location == rhs.location)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var location:LocationInfo!
    public fileprivate(set) var hasLocation:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasLocation {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MsgLocationContent.self): field \"location\" mark required")
        }
        try location.isInitialized()
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasLocation {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:location)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasLocation {
            if let varSizelocation = location?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizelocation
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> MsgLocationContent.Builder {
        return MsgLocationContent.classBuilder() as! MsgLocationContent.Builder
    }
    public func getBuilder() -> MsgLocationContent.Builder {
        return classBuilder() as! MsgLocationContent.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgLocationContent.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgLocationContent.Builder()
    }
    public func toBuilder() throws -> MsgLocationContent.Builder {
        return try MsgLocationContent.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:MsgLocationContent) throws -> MsgLocationContent.Builder {
        return try MsgLocationContent.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasLocation {
            jsonMap["location"] = try location.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> MsgLocationContent {
        return try MsgLocationContent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> MsgLocationContent {
        return try MsgLocationContent.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasLocation {
            output += "\(indent) location {\n"
            if let outDescLocation = location {
                output += try outDescLocation.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLocation {
                if let hashValuelocation = location?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelocation
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "MsgLocationContent"
    }
    override public func className() -> String {
        return "MsgLocationContent"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:MsgLocationContent = MsgLocationContent()
        public func getMessage() -> MsgLocationContent {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var location:LocationInfo! {
            get {
                if locationBuilder_ != nil {
                    builderResult.location = locationBuilder_.getMessage()
                }
                return builderResult.location
            }
            set (value) {
                builderResult.hasLocation = value != nil
                builderResult.location = value
            }
        }
        public var hasLocation:Bool {
            get {
                return builderResult.hasLocation
            }
        }
        fileprivate var locationBuilder_:LocationInfo.Builder! {
            didSet {
                builderResult.hasLocation = true
            }
        }
        public func getLocationBuilder() -> LocationInfo.Builder {
            if locationBuilder_ == nil {
                locationBuilder_ = LocationInfo.Builder()
                builderResult.location = locationBuilder_.getMessage()
                if location != nil {
                    try! locationBuilder_.mergeFrom(other: location)
                }
            }
            return locationBuilder_
        }
        @discardableResult
        public func setLocation(_ value:LocationInfo!) -> MsgLocationContent.Builder {
            self.location = value
            return self
        }
        @discardableResult
        public func mergeLocation(value:LocationInfo) throws -> MsgLocationContent.Builder {
            if builderResult.hasLocation {
                builderResult.location = try LocationInfo.builderWithPrototype(prototype:builderResult.location).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.location = value
            }
            builderResult.hasLocation = true
            return self
        }
        @discardableResult
        public func clearLocation() -> MsgLocationContent.Builder {
            locationBuilder_ = nil
            builderResult.hasLocation = false
            builderResult.location = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> MsgLocationContent.Builder {
            builderResult = MsgLocationContent()
            return self
        }
        override public func clone() throws -> MsgLocationContent.Builder {
            return try MsgLocationContent.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> MsgLocationContent {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> MsgLocationContent {
            let returnMe:MsgLocationContent = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:MsgLocationContent) throws -> MsgLocationContent.Builder {
            if other == MsgLocationContent() {
                return self
            }
            if (other.hasLocation) {
                try mergeLocation(value: other.location)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> MsgLocationContent.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgLocationContent.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:LocationInfo.Builder = LocationInfo.Builder()
                    if hasLocation {
                        try subBuilder.mergeFrom(other: location)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    location = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> MsgLocationContent.Builder {
            let resultDecodedBuilder = MsgLocationContent.Builder()
            if let jsonValueLocation = jsonMap["location"] as? Dictionary<String,Any> {
                resultDecodedBuilder.location = try LocationInfo.Builder.decodeToBuilder(jsonMap:jsonValueLocation).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> MsgLocationContent.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try MsgLocationContent.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class MsgSoundContent : GeneratedMessage {
    public typealias BuilderType = MsgSoundContent.Builder

    public static func == (lhs: MsgSoundContent, rhs: MsgSoundContent) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasSoundDuration == rhs.hasSoundDuration) && (!lhs.hasSoundDuration || lhs.soundDuration == rhs.soundDuration)
        fieldCheck = fieldCheck && (lhs.hasSourceUrl == rhs.hasSourceUrl) && (!lhs.hasSourceUrl || lhs.sourceUrl == rhs.sourceUrl)
        fieldCheck = fieldCheck && (lhs.hasLocationUrl == rhs.hasLocationUrl) && (!lhs.hasLocationUrl || lhs.locationUrl == rhs.locationUrl)
        fieldCheck = fieldCheck && (lhs.hasFildNme == rhs.hasFildNme) && (!lhs.hasFildNme || lhs.fildNme == rhs.fildNme)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// 时长
    public fileprivate(set) var soundDuration:Double! = nil
    public fileprivate(set) var hasSoundDuration:Bool = false

    public fileprivate(set) var sourceUrl:String! = nil
    public fileprivate(set) var hasSourceUrl:Bool = false

    public fileprivate(set) var locationUrl:String! = nil
    public fileprivate(set) var hasLocationUrl:Bool = false

    public fileprivate(set) var fildNme:String! = nil
    public fileprivate(set) var hasFildNme:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasSoundDuration {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MsgSoundContent.self): field \"soundDuration\" mark required")
        }
        if !hasSourceUrl {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MsgSoundContent.self): field \"sourceUrl\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasSoundDuration {
            try codedOutputStream.writeDouble(fieldNumber: 1, value:soundDuration)
        }
        if hasSourceUrl {
            try codedOutputStream.writeString(fieldNumber: 2, value:sourceUrl)
        }
        if hasLocationUrl {
            try codedOutputStream.writeString(fieldNumber: 3, value:locationUrl)
        }
        if hasFildNme {
            try codedOutputStream.writeString(fieldNumber: 4, value:fildNme)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasSoundDuration {
            serialize_size += soundDuration.computeDoubleSize(fieldNumber: 1)
        }
        if hasSourceUrl {
            serialize_size += sourceUrl.computeStringSize(fieldNumber: 2)
        }
        if hasLocationUrl {
            serialize_size += locationUrl.computeStringSize(fieldNumber: 3)
        }
        if hasFildNme {
            serialize_size += fildNme.computeStringSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> MsgSoundContent.Builder {
        return MsgSoundContent.classBuilder() as! MsgSoundContent.Builder
    }
    public func getBuilder() -> MsgSoundContent.Builder {
        return classBuilder() as! MsgSoundContent.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgSoundContent.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgSoundContent.Builder()
    }
    public func toBuilder() throws -> MsgSoundContent.Builder {
        return try MsgSoundContent.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:MsgSoundContent) throws -> MsgSoundContent.Builder {
        return try MsgSoundContent.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasSoundDuration {
            jsonMap["soundDuration"] = Double(soundDuration)
        }
        if hasSourceUrl {
            jsonMap["sourceUrl"] = sourceUrl
        }
        if hasLocationUrl {
            jsonMap["locationUrl"] = locationUrl
        }
        if hasFildNme {
            jsonMap["fildNme"] = fildNme
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> MsgSoundContent {
        return try MsgSoundContent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> MsgSoundContent {
        return try MsgSoundContent.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasSoundDuration {
            output += "\(indent) soundDuration: \(soundDuration) \n"
        }
        if hasSourceUrl {
            output += "\(indent) sourceUrl: \(sourceUrl) \n"
        }
        if hasLocationUrl {
            output += "\(indent) locationUrl: \(locationUrl) \n"
        }
        if hasFildNme {
            output += "\(indent) fildNme: \(fildNme) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSoundDuration {
                hashCode = (hashCode &* 31) &+ soundDuration.hashValue
            }
            if hasSourceUrl {
                hashCode = (hashCode &* 31) &+ sourceUrl.hashValue
            }
            if hasLocationUrl {
                hashCode = (hashCode &* 31) &+ locationUrl.hashValue
            }
            if hasFildNme {
                hashCode = (hashCode &* 31) &+ fildNme.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "MsgSoundContent"
    }
    override public func className() -> String {
        return "MsgSoundContent"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:MsgSoundContent = MsgSoundContent()
        public func getMessage() -> MsgSoundContent {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// 时长
        public var soundDuration:Double {
            get {
                return builderResult.soundDuration
            }
            set (value) {
                builderResult.hasSoundDuration = true
                builderResult.soundDuration = value
            }
        }
        public var hasSoundDuration:Bool {
            get {
                return builderResult.hasSoundDuration
            }
        }
        @discardableResult
        public func setSoundDuration(_ value:Double) -> MsgSoundContent.Builder {
            self.soundDuration = value
            return self
        }
        @discardableResult
        public func clearSoundDuration() -> MsgSoundContent.Builder{
            builderResult.hasSoundDuration = false
            builderResult.soundDuration = nil
            return self
        }
        public var sourceUrl:String {
            get {
                return builderResult.sourceUrl
            }
            set (value) {
                builderResult.hasSourceUrl = true
                builderResult.sourceUrl = value
            }
        }
        public var hasSourceUrl:Bool {
            get {
                return builderResult.hasSourceUrl
            }
        }
        @discardableResult
        public func setSourceUrl(_ value:String) -> MsgSoundContent.Builder {
            self.sourceUrl = value
            return self
        }
        @discardableResult
        public func clearSourceUrl() -> MsgSoundContent.Builder{
            builderResult.hasSourceUrl = false
            builderResult.sourceUrl = nil
            return self
        }
        public var locationUrl:String {
            get {
                return builderResult.locationUrl
            }
            set (value) {
                builderResult.hasLocationUrl = true
                builderResult.locationUrl = value
            }
        }
        public var hasLocationUrl:Bool {
            get {
                return builderResult.hasLocationUrl
            }
        }
        @discardableResult
        public func setLocationUrl(_ value:String) -> MsgSoundContent.Builder {
            self.locationUrl = value
            return self
        }
        @discardableResult
        public func clearLocationUrl() -> MsgSoundContent.Builder{
            builderResult.hasLocationUrl = false
            builderResult.locationUrl = nil
            return self
        }
        public var fildNme:String {
            get {
                return builderResult.fildNme
            }
            set (value) {
                builderResult.hasFildNme = true
                builderResult.fildNme = value
            }
        }
        public var hasFildNme:Bool {
            get {
                return builderResult.hasFildNme
            }
        }
        @discardableResult
        public func setFildNme(_ value:String) -> MsgSoundContent.Builder {
            self.fildNme = value
            return self
        }
        @discardableResult
        public func clearFildNme() -> MsgSoundContent.Builder{
            builderResult.hasFildNme = false
            builderResult.fildNme = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> MsgSoundContent.Builder {
            builderResult = MsgSoundContent()
            return self
        }
        override public func clone() throws -> MsgSoundContent.Builder {
            return try MsgSoundContent.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> MsgSoundContent {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> MsgSoundContent {
            let returnMe:MsgSoundContent = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:MsgSoundContent) throws -> MsgSoundContent.Builder {
            if other == MsgSoundContent() {
                return self
            }
            if other.hasSoundDuration {
                soundDuration = other.soundDuration
            }
            if other.hasSourceUrl {
                sourceUrl = other.sourceUrl
            }
            if other.hasLocationUrl {
                locationUrl = other.locationUrl
            }
            if other.hasFildNme {
                fildNme = other.fildNme
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> MsgSoundContent.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgSoundContent.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 9:
                    soundDuration = try codedInputStream.readDouble()

                case 18:
                    sourceUrl = try codedInputStream.readString()

                case 26:
                    locationUrl = try codedInputStream.readString()

                case 34:
                    fildNme = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> MsgSoundContent.Builder {
            let resultDecodedBuilder = MsgSoundContent.Builder()
            if let jsonValueSoundDuration = jsonMap["soundDuration"] as? Double {
                resultDecodedBuilder.soundDuration = Double(jsonValueSoundDuration)
            } else if let jsonValueSoundDuration = jsonMap["soundDuration"] as? String {
                resultDecodedBuilder.soundDuration = Double(jsonValueSoundDuration)!
            }
            if let jsonValueSourceUrl = jsonMap["sourceUrl"] as? String {
                resultDecodedBuilder.sourceUrl = jsonValueSourceUrl
            }
            if let jsonValueLocationUrl = jsonMap["locationUrl"] as? String {
                resultDecodedBuilder.locationUrl = jsonValueLocationUrl
            }
            if let jsonValueFildNme = jsonMap["fildNme"] as? String {
                resultDecodedBuilder.fildNme = jsonValueFildNme
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> MsgSoundContent.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try MsgSoundContent.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

/// 表情
final public class MsgExpressionContent : GeneratedMessage {
    public typealias BuilderType = MsgExpressionContent.Builder

    public static func == (lhs: MsgExpressionContent, rhs: MsgExpressionContent) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasEid == rhs.hasEid) && (!lhs.hasEid || lhs.eid == rhs.eid)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// 表情id
    public fileprivate(set) var eid:Int32! = nil
    public fileprivate(set) var hasEid:Bool = false

    /// 表情名称
    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasEid {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MsgExpressionContent.self): field \"eid\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasEid {
            try codedOutputStream.writeInt32(fieldNumber: 1, value:eid)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 2, value:name)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasEid {
            serialize_size += eid.computeInt32Size(fieldNumber: 1)
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> MsgExpressionContent.Builder {
        return MsgExpressionContent.classBuilder() as! MsgExpressionContent.Builder
    }
    public func getBuilder() -> MsgExpressionContent.Builder {
        return classBuilder() as! MsgExpressionContent.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgExpressionContent.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgExpressionContent.Builder()
    }
    public func toBuilder() throws -> MsgExpressionContent.Builder {
        return try MsgExpressionContent.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:MsgExpressionContent) throws -> MsgExpressionContent.Builder {
        return try MsgExpressionContent.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasEid {
            jsonMap["eid"] = Int(eid)
        }
        if hasName {
            jsonMap["name"] = name
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> MsgExpressionContent {
        return try MsgExpressionContent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> MsgExpressionContent {
        return try MsgExpressionContent.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasEid {
            output += "\(indent) eid: \(eid) \n"
        }
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEid {
                hashCode = (hashCode &* 31) &+ eid.hashValue
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "MsgExpressionContent"
    }
    override public func className() -> String {
        return "MsgExpressionContent"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:MsgExpressionContent = MsgExpressionContent()
        public func getMessage() -> MsgExpressionContent {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// 表情id
        public var eid:Int32 {
            get {
                return builderResult.eid
            }
            set (value) {
                builderResult.hasEid = true
                builderResult.eid = value
            }
        }
        public var hasEid:Bool {
            get {
                return builderResult.hasEid
            }
        }
        @discardableResult
        public func setEid(_ value:Int32) -> MsgExpressionContent.Builder {
            self.eid = value
            return self
        }
        @discardableResult
        public func clearEid() -> MsgExpressionContent.Builder{
            builderResult.hasEid = false
            builderResult.eid = nil
            return self
        }
        /// 表情名称
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> MsgExpressionContent.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> MsgExpressionContent.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> MsgExpressionContent.Builder {
            builderResult = MsgExpressionContent()
            return self
        }
        override public func clone() throws -> MsgExpressionContent.Builder {
            return try MsgExpressionContent.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> MsgExpressionContent {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> MsgExpressionContent {
            let returnMe:MsgExpressionContent = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:MsgExpressionContent) throws -> MsgExpressionContent.Builder {
            if other == MsgExpressionContent() {
                return self
            }
            if other.hasEid {
                eid = other.eid
            }
            if other.hasName {
                name = other.name
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> MsgExpressionContent.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgExpressionContent.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    eid = try codedInputStream.readInt32()

                case 18:
                    name = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> MsgExpressionContent.Builder {
            let resultDecodedBuilder = MsgExpressionContent.Builder()
            if let jsonValueEid = jsonMap["eid"] as? Int {
                resultDecodedBuilder.eid = Int32(jsonValueEid)
            } else if let jsonValueEid = jsonMap["eid"] as? String {
                resultDecodedBuilder.eid = Int32(jsonValueEid)!
            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> MsgExpressionContent.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try MsgExpressionContent.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class MsgCumstomContent : GeneratedMessage {
    public typealias BuilderType = MsgCumstomContent.Builder

    public static func == (lhs: MsgCumstomContent, rhs: MsgCumstomContent) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasInfo == rhs.hasInfo) && (!lhs.hasInfo || lhs.info == rhs.info)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var info:ExtKeyInfo!
    public fileprivate(set) var hasInfo:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasInfo {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MsgCumstomContent.self): field \"info\" mark required")
        }
        try info.isInitialized()
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasInfo {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:info)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasInfo {
            if let varSizeinfo = info?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeinfo
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> MsgCumstomContent.Builder {
        return MsgCumstomContent.classBuilder() as! MsgCumstomContent.Builder
    }
    public func getBuilder() -> MsgCumstomContent.Builder {
        return classBuilder() as! MsgCumstomContent.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgCumstomContent.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MsgCumstomContent.Builder()
    }
    public func toBuilder() throws -> MsgCumstomContent.Builder {
        return try MsgCumstomContent.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:MsgCumstomContent) throws -> MsgCumstomContent.Builder {
        return try MsgCumstomContent.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasInfo {
            jsonMap["info"] = try info.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> MsgCumstomContent {
        return try MsgCumstomContent.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> MsgCumstomContent {
        return try MsgCumstomContent.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasInfo {
            output += "\(indent) info {\n"
            if let outDescInfo = info {
                output += try outDescInfo.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasInfo {
                if let hashValueinfo = info?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinfo
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "MsgCumstomContent"
    }
    override public func className() -> String {
        return "MsgCumstomContent"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:MsgCumstomContent = MsgCumstomContent()
        public func getMessage() -> MsgCumstomContent {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var info:ExtKeyInfo! {
            get {
                if infoBuilder_ != nil {
                    builderResult.info = infoBuilder_.getMessage()
                }
                return builderResult.info
            }
            set (value) {
                builderResult.hasInfo = value != nil
                builderResult.info = value
            }
        }
        public var hasInfo:Bool {
            get {
                return builderResult.hasInfo
            }
        }
        fileprivate var infoBuilder_:ExtKeyInfo.Builder! {
            didSet {
                builderResult.hasInfo = true
            }
        }
        public func getInfoBuilder() -> ExtKeyInfo.Builder {
            if infoBuilder_ == nil {
                infoBuilder_ = ExtKeyInfo.Builder()
                builderResult.info = infoBuilder_.getMessage()
                if info != nil {
                    try! infoBuilder_.mergeFrom(other: info)
                }
            }
            return infoBuilder_
        }
        @discardableResult
        public func setInfo(_ value:ExtKeyInfo!) -> MsgCumstomContent.Builder {
            self.info = value
            return self
        }
        @discardableResult
        public func mergeInfo(value:ExtKeyInfo) throws -> MsgCumstomContent.Builder {
            if builderResult.hasInfo {
                builderResult.info = try ExtKeyInfo.builderWithPrototype(prototype:builderResult.info).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.info = value
            }
            builderResult.hasInfo = true
            return self
        }
        @discardableResult
        public func clearInfo() -> MsgCumstomContent.Builder {
            infoBuilder_ = nil
            builderResult.hasInfo = false
            builderResult.info = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> MsgCumstomContent.Builder {
            builderResult = MsgCumstomContent()
            return self
        }
        override public func clone() throws -> MsgCumstomContent.Builder {
            return try MsgCumstomContent.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> MsgCumstomContent {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> MsgCumstomContent {
            let returnMe:MsgCumstomContent = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:MsgCumstomContent) throws -> MsgCumstomContent.Builder {
            if other == MsgCumstomContent() {
                return self
            }
            if (other.hasInfo) {
                try mergeInfo(value: other.info)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> MsgCumstomContent.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgCumstomContent.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:ExtKeyInfo.Builder = ExtKeyInfo.Builder()
                    if hasInfo {
                        try subBuilder.mergeFrom(other: info)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    info = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> MsgCumstomContent.Builder {
            let resultDecodedBuilder = MsgCumstomContent.Builder()
            if let jsonValueInfo = jsonMap["info"] as? Dictionary<String,Any> {
                resultDecodedBuilder.info = try ExtKeyInfo.Builder.decodeToBuilder(jsonMap:jsonValueInfo).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> MsgCumstomContent.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try MsgCumstomContent.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class BaseMsg : GeneratedMessage {
    public typealias BuilderType = BaseMsg.Builder

    public static func == (lhs: BaseMsg, rhs: BaseMsg) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasTargetUserInfo == rhs.hasTargetUserInfo) && (!lhs.hasTargetUserInfo || lhs.targetUserInfo == rhs.targetUserInfo)
        fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
        fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
        fieldCheck = fieldCheck && (lhs.hasSentUserInfo == rhs.hasSentUserInfo) && (!lhs.hasSentUserInfo || lhs.sentUserInfo == rhs.sentUserInfo)
        fieldCheck = fieldCheck && (lhs.hasExt == rhs.hasExt) && (!lhs.hasExt || lhs.ext == rhs.ext)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var sentUserInfo:UserInfo!
    public fileprivate(set) var hasSentUserInfo:Bool = false
    public fileprivate(set) var targetUserInfo:UserInfo!
    public fileprivate(set) var hasTargetUserInfo:Bool = false
    public fileprivate(set) var type:EnumMsgContentType = EnumMsgContentType.enumMsgContentTypeText
    public fileprivate(set) var hasType:Bool = false
    public fileprivate(set) var content:Data! = nil
    public fileprivate(set) var hasContent:Bool = false

    public fileprivate(set) var ext:ExtKeyInfo!
    public fileprivate(set) var hasExt:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasSentUserInfo {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(BaseMsg.self): field \"sentUserInfo\" mark required")
        }
        if !hasTargetUserInfo {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(BaseMsg.self): field \"targetUserInfo\" mark required")
        }
        if !hasType {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(BaseMsg.self): field \"type\" mark required")
        }
        if !hasContent {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(BaseMsg.self): field \"content\" mark required")
        }
        try sentUserInfo.isInitialized()
        try targetUserInfo.isInitialized()
        if hasExt {
            try ext.isInitialized()
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasTargetUserInfo {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:targetUserInfo)
        }
        if hasType {
            try codedOutputStream.writeEnum(fieldNumber: 2, value:type.rawValue)
        }
        if hasContent {
            try codedOutputStream.writeData(fieldNumber: 3, value:content)
        }
        if hasSentUserInfo {
            try codedOutputStream.writeMessage(fieldNumber: 4, value:sentUserInfo)
        }
        if hasExt {
            try codedOutputStream.writeMessage(fieldNumber: 9, value:ext)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasTargetUserInfo {
            if let varSizetargetUserInfo = targetUserInfo?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizetargetUserInfo
            }
        }
        if (hasType) {
            serialize_size += type.rawValue.computeEnumSize(fieldNumber: 2)
        }
        if hasContent {
            serialize_size += content.computeDataSize(fieldNumber: 3)
        }
        if hasSentUserInfo {
            if let varSizesentUserInfo = sentUserInfo?.computeMessageSize(fieldNumber: 4) {
                serialize_size += varSizesentUserInfo
            }
        }
        if hasExt {
            if let varSizeext = ext?.computeMessageSize(fieldNumber: 9) {
                serialize_size += varSizeext
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> BaseMsg.Builder {
        return BaseMsg.classBuilder() as! BaseMsg.Builder
    }
    public func getBuilder() -> BaseMsg.Builder {
        return classBuilder() as! BaseMsg.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return BaseMsg.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return BaseMsg.Builder()
    }
    public func toBuilder() throws -> BaseMsg.Builder {
        return try BaseMsg.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:BaseMsg) throws -> BaseMsg.Builder {
        return try BaseMsg.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasSentUserInfo {
            jsonMap["sentUserInfo"] = try sentUserInfo.encode()
        }
        if hasTargetUserInfo {
            jsonMap["targetUserInfo"] = try targetUserInfo.encode()
        }
        if hasType {
            jsonMap["type"] = type.toString()
        }
        if hasContent {
            jsonMap["content"] = content.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasExt {
            jsonMap["ext"] = try ext.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BaseMsg {
        return try BaseMsg.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> BaseMsg {
        return try BaseMsg.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasTargetUserInfo {
            output += "\(indent) targetUserInfo {\n"
            if let outDescTargetUserInfo = targetUserInfo {
                output += try outDescTargetUserInfo.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if (hasType) {
            output += "\(indent) type: \(type.description)\n"
        }
        if hasContent {
            output += "\(indent) content: \(content) \n"
        }
        if hasSentUserInfo {
            output += "\(indent) sentUserInfo {\n"
            if let outDescSentUserInfo = sentUserInfo {
                output += try outDescSentUserInfo.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasExt {
            output += "\(indent) ext {\n"
            if let outDescExt = ext {
                output += try outDescExt.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTargetUserInfo {
                if let hashValuetargetUserInfo = targetUserInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetargetUserInfo
                }
            }
            if hasType {
                 hashCode = (hashCode &* 31) &+ type.hashValue
            }
            if hasContent {
                hashCode = (hashCode &* 31) &+ content.hashValue
            }
            if hasSentUserInfo {
                if let hashValuesentUserInfo = sentUserInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesentUserInfo
                }
            }
            if hasExt {
                if let hashValueext = ext?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueext
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "BaseMsg"
    }
    override public func className() -> String {
        return "BaseMsg"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:BaseMsg = BaseMsg()
        public func getMessage() -> BaseMsg {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var sentUserInfo:UserInfo! {
            get {
                if sentUserInfoBuilder_ != nil {
                    builderResult.sentUserInfo = sentUserInfoBuilder_.getMessage()
                }
                return builderResult.sentUserInfo
            }
            set (value) {
                builderResult.hasSentUserInfo = value != nil
                builderResult.sentUserInfo = value
            }
        }
        public var hasSentUserInfo:Bool {
            get {
                return builderResult.hasSentUserInfo
            }
        }
        fileprivate var sentUserInfoBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasSentUserInfo = true
            }
        }
        public func getSentUserInfoBuilder() -> UserInfo.Builder {
            if sentUserInfoBuilder_ == nil {
                sentUserInfoBuilder_ = UserInfo.Builder()
                builderResult.sentUserInfo = sentUserInfoBuilder_.getMessage()
                if sentUserInfo != nil {
                    try! sentUserInfoBuilder_.mergeFrom(other: sentUserInfo)
                }
            }
            return sentUserInfoBuilder_
        }
        @discardableResult
        public func setSentUserInfo(_ value:UserInfo!) -> BaseMsg.Builder {
            self.sentUserInfo = value
            return self
        }
        @discardableResult
        public func mergeSentUserInfo(value:UserInfo) throws -> BaseMsg.Builder {
            if builderResult.hasSentUserInfo {
                builderResult.sentUserInfo = try UserInfo.builderWithPrototype(prototype:builderResult.sentUserInfo).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.sentUserInfo = value
            }
            builderResult.hasSentUserInfo = true
            return self
        }
        @discardableResult
        public func clearSentUserInfo() -> BaseMsg.Builder {
            sentUserInfoBuilder_ = nil
            builderResult.hasSentUserInfo = false
            builderResult.sentUserInfo = nil
            return self
        }
        public var targetUserInfo:UserInfo! {
            get {
                if targetUserInfoBuilder_ != nil {
                    builderResult.targetUserInfo = targetUserInfoBuilder_.getMessage()
                }
                return builderResult.targetUserInfo
            }
            set (value) {
                builderResult.hasTargetUserInfo = value != nil
                builderResult.targetUserInfo = value
            }
        }
        public var hasTargetUserInfo:Bool {
            get {
                return builderResult.hasTargetUserInfo
            }
        }
        fileprivate var targetUserInfoBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasTargetUserInfo = true
            }
        }
        public func getTargetUserInfoBuilder() -> UserInfo.Builder {
            if targetUserInfoBuilder_ == nil {
                targetUserInfoBuilder_ = UserInfo.Builder()
                builderResult.targetUserInfo = targetUserInfoBuilder_.getMessage()
                if targetUserInfo != nil {
                    try! targetUserInfoBuilder_.mergeFrom(other: targetUserInfo)
                }
            }
            return targetUserInfoBuilder_
        }
        @discardableResult
        public func setTargetUserInfo(_ value:UserInfo!) -> BaseMsg.Builder {
            self.targetUserInfo = value
            return self
        }
        @discardableResult
        public func mergeTargetUserInfo(value:UserInfo) throws -> BaseMsg.Builder {
            if builderResult.hasTargetUserInfo {
                builderResult.targetUserInfo = try UserInfo.builderWithPrototype(prototype:builderResult.targetUserInfo).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.targetUserInfo = value
            }
            builderResult.hasTargetUserInfo = true
            return self
        }
        @discardableResult
        public func clearTargetUserInfo() -> BaseMsg.Builder {
            targetUserInfoBuilder_ = nil
            builderResult.hasTargetUserInfo = false
            builderResult.targetUserInfo = nil
            return self
        }
            public var type:EnumMsgContentType {
                get {
                    return builderResult.type
                }
                set (value) {
                    builderResult.hasType = true
                    builderResult.type = value
                }
            }
            public var hasType:Bool{
                get {
                    return builderResult.hasType
                }
            }
        @discardableResult
            public func setType(_ value:EnumMsgContentType) -> BaseMsg.Builder {
              self.type = value
              return self
            }
        @discardableResult
            public func clearType() -> BaseMsg.Builder {
               builderResult.hasType = false
               builderResult.type = .enumMsgContentTypeText
               return self
            }
        public var content:Data {
            get {
                return builderResult.content
            }
            set (value) {
                builderResult.hasContent = true
                builderResult.content = value
            }
        }
        public var hasContent:Bool {
            get {
                return builderResult.hasContent
            }
        }
        @discardableResult
        public func setContent(_ value:Data) -> BaseMsg.Builder {
            self.content = value
            return self
        }
        @discardableResult
        public func clearContent() -> BaseMsg.Builder{
            builderResult.hasContent = false
            builderResult.content = nil
            return self
        }
        public var ext:ExtKeyInfo! {
            get {
                if extBuilder_ != nil {
                    builderResult.ext = extBuilder_.getMessage()
                }
                return builderResult.ext
            }
            set (value) {
                builderResult.hasExt = value != nil
                builderResult.ext = value
            }
        }
        public var hasExt:Bool {
            get {
                return builderResult.hasExt
            }
        }
        fileprivate var extBuilder_:ExtKeyInfo.Builder! {
            didSet {
                builderResult.hasExt = true
            }
        }
        public func getExtBuilder() -> ExtKeyInfo.Builder {
            if extBuilder_ == nil {
                extBuilder_ = ExtKeyInfo.Builder()
                builderResult.ext = extBuilder_.getMessage()
                if ext != nil {
                    try! extBuilder_.mergeFrom(other: ext)
                }
            }
            return extBuilder_
        }
        @discardableResult
        public func setExt(_ value:ExtKeyInfo!) -> BaseMsg.Builder {
            self.ext = value
            return self
        }
        @discardableResult
        public func mergeExt(value:ExtKeyInfo) throws -> BaseMsg.Builder {
            if builderResult.hasExt {
                builderResult.ext = try ExtKeyInfo.builderWithPrototype(prototype:builderResult.ext).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.ext = value
            }
            builderResult.hasExt = true
            return self
        }
        @discardableResult
        public func clearExt() -> BaseMsg.Builder {
            extBuilder_ = nil
            builderResult.hasExt = false
            builderResult.ext = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> BaseMsg.Builder {
            builderResult = BaseMsg()
            return self
        }
        override public func clone() throws -> BaseMsg.Builder {
            return try BaseMsg.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> BaseMsg {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> BaseMsg {
            let returnMe:BaseMsg = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:BaseMsg) throws -> BaseMsg.Builder {
            if other == BaseMsg() {
                return self
            }
            if (other.hasSentUserInfo) {
                try mergeSentUserInfo(value: other.sentUserInfo)
            }
            if (other.hasTargetUserInfo) {
                try mergeTargetUserInfo(value: other.targetUserInfo)
            }
            if other.hasType {
                type = other.type
            }
            if other.hasContent {
                content = other.content
            }
            if (other.hasExt) {
                try mergeExt(value: other.ext)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BaseMsg.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BaseMsg.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasTargetUserInfo {
                        try subBuilder.mergeFrom(other: targetUserInfo)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    targetUserInfo = subBuilder.buildPartial()

                case 16:
                    let valueInttype = try codedInputStream.readEnum()
                    if let enumstype = EnumMsgContentType(rawValue:valueInttype){
                        type = enumstype
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueInttype))
                    }

                case 26:
                    content = try codedInputStream.readData()

                case 34:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasSentUserInfo {
                        try subBuilder.mergeFrom(other: sentUserInfo)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    sentUserInfo = subBuilder.buildPartial()

                case 74:
                    let subBuilder:ExtKeyInfo.Builder = ExtKeyInfo.Builder()
                    if hasExt {
                        try subBuilder.mergeFrom(other: ext)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    ext = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BaseMsg.Builder {
            let resultDecodedBuilder = BaseMsg.Builder()
            if let jsonValueSentUserInfo = jsonMap["sentUserInfo"] as? Dictionary<String,Any> {
                resultDecodedBuilder.sentUserInfo = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueSentUserInfo).build()

            }
            if let jsonValueTargetUserInfo = jsonMap["targetUserInfo"] as? Dictionary<String,Any> {
                resultDecodedBuilder.targetUserInfo = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueTargetUserInfo).build()

            }
            if let jsonValueType = jsonMap["type"] as? String {
                resultDecodedBuilder.type = try EnumMsgContentType.fromString(jsonValueType)
            }
            if let jsonValueContent = jsonMap["content"] as? String {
                resultDecodedBuilder.content = Data(base64Encoded:jsonValueContent, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueExt = jsonMap["ext"] as? Dictionary<String,Any> {
                resultDecodedBuilder.ext = try ExtKeyInfo.Builder.decodeToBuilder(jsonMap:jsonValueExt).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> BaseMsg.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try BaseMsg.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension MsgTextContent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<MsgTextContent> {
        var mergedArray = Array<MsgTextContent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> MsgTextContent? {
        return try MsgTextContent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> MsgTextContent {
        return try MsgTextContent.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> MsgTextContent {
        return try MsgTextContent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> MsgTextContent {
        return try MsgTextContent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> MsgTextContent {
        return try MsgTextContent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> MsgTextContent {
        return try MsgTextContent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgTextContent {
        return try MsgTextContent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "text": return self.text
        default: return nil
        }
    }
}
extension MsgTextContent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = MsgTextContent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "text": return self.text
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            default: return
            }
        }
    }
}
extension MsgImgContent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<MsgImgContent> {
        var mergedArray = Array<MsgImgContent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> MsgImgContent? {
        return try MsgImgContent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> MsgImgContent {
        return try MsgImgContent.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> MsgImgContent {
        return try MsgImgContent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> MsgImgContent {
        return try MsgImgContent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> MsgImgContent {
        return try MsgImgContent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> MsgImgContent {
        return try MsgImgContent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgImgContent {
        return try MsgImgContent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "imgUrl": return self.imgUrl
        default: return nil
        }
    }
}
extension MsgImgContent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = MsgImgContent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "imgUrl": return self.imgUrl
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "imgUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.imgUrl = newSubscriptValue
            default: return
            }
        }
    }
}
extension LocationInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<LocationInfo> {
        var mergedArray = Array<LocationInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> LocationInfo? {
        return try LocationInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> LocationInfo {
        return try LocationInfo.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> LocationInfo {
        return try LocationInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> LocationInfo {
        return try LocationInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> LocationInfo {
        return try LocationInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> LocationInfo {
        return try LocationInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LocationInfo {
        return try LocationInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "lat": return self.lat
        case "lon": return self.lon
        default: return nil
        }
    }
}
extension LocationInfo.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = LocationInfo
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "lat": return self.lat
            case "lon": return self.lon
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "lat":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.lat = newSubscriptValue
            case "lon":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.lon = newSubscriptValue
            default: return
            }
        }
    }
}
extension MsgLocationContent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<MsgLocationContent> {
        var mergedArray = Array<MsgLocationContent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> MsgLocationContent? {
        return try MsgLocationContent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> MsgLocationContent {
        return try MsgLocationContent.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> MsgLocationContent {
        return try MsgLocationContent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> MsgLocationContent {
        return try MsgLocationContent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> MsgLocationContent {
        return try MsgLocationContent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> MsgLocationContent {
        return try MsgLocationContent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgLocationContent {
        return try MsgLocationContent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "location": return self.location
        default: return nil
        }
    }
}
extension MsgLocationContent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = MsgLocationContent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "location": return self.location
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "location":
                guard let newSubscriptValue = newSubscriptValue as? LocationInfo else {
                    return
                }
                self.location = newSubscriptValue
            default: return
            }
        }
    }
}
extension MsgSoundContent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<MsgSoundContent> {
        var mergedArray = Array<MsgSoundContent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> MsgSoundContent? {
        return try MsgSoundContent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> MsgSoundContent {
        return try MsgSoundContent.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> MsgSoundContent {
        return try MsgSoundContent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> MsgSoundContent {
        return try MsgSoundContent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> MsgSoundContent {
        return try MsgSoundContent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> MsgSoundContent {
        return try MsgSoundContent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgSoundContent {
        return try MsgSoundContent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "soundDuration": return self.soundDuration
        case "sourceUrl": return self.sourceUrl
        case "locationUrl": return self.locationUrl
        case "fildNme": return self.fildNme
        default: return nil
        }
    }
}
extension MsgSoundContent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = MsgSoundContent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "soundDuration": return self.soundDuration
            case "sourceUrl": return self.sourceUrl
            case "locationUrl": return self.locationUrl
            case "fildNme": return self.fildNme
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "soundDuration":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.soundDuration = newSubscriptValue
            case "sourceUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.sourceUrl = newSubscriptValue
            case "locationUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.locationUrl = newSubscriptValue
            case "fildNme":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.fildNme = newSubscriptValue
            default: return
            }
        }
    }
}
extension MsgExpressionContent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<MsgExpressionContent> {
        var mergedArray = Array<MsgExpressionContent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> MsgExpressionContent? {
        return try MsgExpressionContent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> MsgExpressionContent {
        return try MsgExpressionContent.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> MsgExpressionContent {
        return try MsgExpressionContent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> MsgExpressionContent {
        return try MsgExpressionContent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> MsgExpressionContent {
        return try MsgExpressionContent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> MsgExpressionContent {
        return try MsgExpressionContent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgExpressionContent {
        return try MsgExpressionContent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "eid": return self.eid
        case "name": return self.name
        default: return nil
        }
    }
}
extension MsgExpressionContent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = MsgExpressionContent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "eid": return self.eid
            case "name": return self.name
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "eid":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.eid = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            default: return
            }
        }
    }
}
extension MsgCumstomContent: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<MsgCumstomContent> {
        var mergedArray = Array<MsgCumstomContent>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> MsgCumstomContent? {
        return try MsgCumstomContent.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> MsgCumstomContent {
        return try MsgCumstomContent.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> MsgCumstomContent {
        return try MsgCumstomContent.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> MsgCumstomContent {
        return try MsgCumstomContent.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> MsgCumstomContent {
        return try MsgCumstomContent.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> MsgCumstomContent {
        return try MsgCumstomContent.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MsgCumstomContent {
        return try MsgCumstomContent.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "info": return self.info
        default: return nil
        }
    }
}
extension MsgCumstomContent.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = MsgCumstomContent
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "info": return self.info
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "info":
                guard let newSubscriptValue = newSubscriptValue as? ExtKeyInfo else {
                    return
                }
                self.info = newSubscriptValue
            default: return
            }
        }
    }
}
extension BaseMsg: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BaseMsg> {
        var mergedArray = Array<BaseMsg>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BaseMsg? {
        return try BaseMsg.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BaseMsg {
        return try BaseMsg.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BaseMsg {
        return try BaseMsg.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BaseMsg {
        return try BaseMsg.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BaseMsg {
        return try BaseMsg.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BaseMsg {
        return try BaseMsg.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BaseMsg {
        return try BaseMsg.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "sentUserInfo": return self.sentUserInfo
        case "targetUserInfo": return self.targetUserInfo
        case "type": return self.type
        case "content": return self.content
        case "ext": return self.ext
        default: return nil
        }
    }
}
extension BaseMsg.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = BaseMsg
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "sentUserInfo": return self.sentUserInfo
            case "targetUserInfo": return self.targetUserInfo
            case "type": return self.type
            case "content": return self.content
            case "ext": return self.ext
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "sentUserInfo":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.sentUserInfo = newSubscriptValue
            case "targetUserInfo":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.targetUserInfo = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? EnumMsgContentType else {
                    return
                }
                self.type = newSubscriptValue
            case "content":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.content = newSubscriptValue
            case "ext":
                guard let newSubscriptValue = newSubscriptValue as? ExtKeyInfo else {
                    return
                }
                self.ext = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
