/// Generated by the Protocol Buffers 3.5.1 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "user.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct UserRoot {
    public static let `default` = UserRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RootRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}



//Enum type declaration start 

public enum UserCmd:Int32, GeneratedEnum {
    case userCmdSignIn = 1
    case userCmdLogin = 2
    case userCmdLogout = 3
    case userCmdUserInfo = 4
    case userCmdUserById = 5
    public func toString() -> String {
        switch self {
        case .userCmdSignIn: return "User_cmd_sign_in"
        case .userCmdLogin: return "User_cmd_login"
        case .userCmdLogout: return "User_cmd_logout"
        case .userCmdUserInfo: return "User_cmd_user_info"
        case .userCmdUserById: return "User_cmd_user_by_id"
        }
    }
    public static func fromString(_ str:String) throws -> UserCmd {
        switch str {
        case "User_cmd_sign_in":    return .userCmdSignIn
        case "User_cmd_login":    return .userCmdLogin
        case "User_cmd_logout":    return .userCmdLogout
        case "User_cmd_user_info":    return .userCmdUserInfo
        case "User_cmd_user_by_id":    return .userCmdUserById
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .userCmdSignIn: return ".userCmdSignIn"
        case .userCmdLogin: return ".userCmdLogin"
        case .userCmdLogout: return ".userCmdLogout"
        case .userCmdUserInfo: return ".userCmdUserInfo"
        case .userCmdUserById: return ".userCmdUserById"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:UserCmd, rhs:UserCmd) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 

final public class UserMsg : GeneratedMessage {
    public typealias BuilderType = UserMsg.Builder

    public static func == (lhs: UserMsg, rhs: UserMsg) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasCmd == rhs.hasCmd) && (!lhs.hasCmd || lhs.cmd == rhs.cmd)
        fieldCheck = fieldCheck && (lhs.hasBody == rhs.hasBody) && (!lhs.hasBody || lhs.body == rhs.body)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var cmd:UserCmd = UserCmd.userCmdSignIn
    public fileprivate(set) var hasCmd:Bool = false
    public fileprivate(set) var body:Data! = nil
    public fileprivate(set) var hasBody:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasCmd {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserMsg.self): field \"cmd\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasCmd {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:cmd.rawValue)
        }
        if hasBody {
            try codedOutputStream.writeData(fieldNumber: 2, value:body)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if (hasCmd) {
            serialize_size += cmd.rawValue.computeEnumSize(fieldNumber: 1)
        }
        if hasBody {
            serialize_size += body.computeDataSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> UserMsg.Builder {
        return UserMsg.classBuilder() as! UserMsg.Builder
    }
    public func getBuilder() -> UserMsg.Builder {
        return classBuilder() as! UserMsg.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserMsg.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserMsg.Builder()
    }
    public func toBuilder() throws -> UserMsg.Builder {
        return try UserMsg.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:UserMsg) throws -> UserMsg.Builder {
        return try UserMsg.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasCmd {
            jsonMap["cmd"] = cmd.toString()
        }
        if hasBody {
            jsonMap["body"] = body.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> UserMsg {
        return try UserMsg.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> UserMsg {
        return try UserMsg.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if (hasCmd) {
            output += "\(indent) cmd: \(cmd.description)\n"
        }
        if hasBody {
            output += "\(indent) body: \(body) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCmd {
                 hashCode = (hashCode &* 31) &+ cmd.hashValue
            }
            if hasBody {
                hashCode = (hashCode &* 31) &+ body.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "UserMsg"
    }
    override public func className() -> String {
        return "UserMsg"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:UserMsg = UserMsg()
        public func getMessage() -> UserMsg {
            return builderResult
        }

        required override public init () {
            super.init()
        }
            public var cmd:UserCmd {
                get {
                    return builderResult.cmd
                }
                set (value) {
                    builderResult.hasCmd = true
                    builderResult.cmd = value
                }
            }
            public var hasCmd:Bool{
                get {
                    return builderResult.hasCmd
                }
            }
        @discardableResult
            public func setCmd(_ value:UserCmd) -> UserMsg.Builder {
              self.cmd = value
              return self
            }
        @discardableResult
            public func clearCmd() -> UserMsg.Builder {
               builderResult.hasCmd = false
               builderResult.cmd = .userCmdSignIn
               return self
            }
        public var body:Data {
            get {
                return builderResult.body
            }
            set (value) {
                builderResult.hasBody = true
                builderResult.body = value
            }
        }
        public var hasBody:Bool {
            get {
                return builderResult.hasBody
            }
        }
        @discardableResult
        public func setBody(_ value:Data) -> UserMsg.Builder {
            self.body = value
            return self
        }
        @discardableResult
        public func clearBody() -> UserMsg.Builder{
            builderResult.hasBody = false
            builderResult.body = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> UserMsg.Builder {
            builderResult = UserMsg()
            return self
        }
        override public func clone() throws -> UserMsg.Builder {
            return try UserMsg.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> UserMsg {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> UserMsg {
            let returnMe:UserMsg = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:UserMsg) throws -> UserMsg.Builder {
            if other == UserMsg() {
                return self
            }
            if other.hasCmd {
                cmd = other.cmd
            }
            if other.hasBody {
                body = other.body
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> UserMsg.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserMsg.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    let valueIntcmd = try codedInputStream.readEnum()
                    if let enumscmd = UserCmd(rawValue:valueIntcmd){
                        cmd = enumscmd
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntcmd))
                    }

                case 18:
                    body = try codedInputStream.readData()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> UserMsg.Builder {
            let resultDecodedBuilder = UserMsg.Builder()
            if let jsonValueCmd = jsonMap["cmd"] as? String {
                resultDecodedBuilder.cmd = try UserCmd.fromString(jsonValueCmd)
            }
            if let jsonValueBody = jsonMap["body"] as? String {
                resultDecodedBuilder.body = Data(base64Encoded:jsonValueBody, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> UserMsg.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try UserMsg.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class SigninReq : GeneratedMessage {
    public typealias BuilderType = SigninReq.Builder

    public static func == (lhs: SigninReq, rhs: SigninReq) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasNickName == rhs.hasNickName) && (!lhs.hasNickName || lhs.nickName == rhs.nickName)
        fieldCheck = fieldCheck && (lhs.hasPwd == rhs.hasPwd) && (!lhs.hasPwd || lhs.pwd == rhs.pwd)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var nickName:String! = nil
    public fileprivate(set) var hasNickName:Bool = false

    public fileprivate(set) var pwd:String! = nil
    public fileprivate(set) var hasPwd:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasNickName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(SigninReq.self): field \"nickName\" mark required")
        }
        if !hasPwd {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(SigninReq.self): field \"pwd\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasNickName {
            try codedOutputStream.writeString(fieldNumber: 1, value:nickName)
        }
        if hasPwd {
            try codedOutputStream.writeString(fieldNumber: 2, value:pwd)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasNickName {
            serialize_size += nickName.computeStringSize(fieldNumber: 1)
        }
        if hasPwd {
            serialize_size += pwd.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> SigninReq.Builder {
        return SigninReq.classBuilder() as! SigninReq.Builder
    }
    public func getBuilder() -> SigninReq.Builder {
        return classBuilder() as! SigninReq.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return SigninReq.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return SigninReq.Builder()
    }
    public func toBuilder() throws -> SigninReq.Builder {
        return try SigninReq.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:SigninReq) throws -> SigninReq.Builder {
        return try SigninReq.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasNickName {
            jsonMap["nickName"] = nickName
        }
        if hasPwd {
            jsonMap["pwd"] = pwd
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> SigninReq {
        return try SigninReq.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> SigninReq {
        return try SigninReq.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasNickName {
            output += "\(indent) nickName: \(nickName) \n"
        }
        if hasPwd {
            output += "\(indent) pwd: \(pwd) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasNickName {
                hashCode = (hashCode &* 31) &+ nickName.hashValue
            }
            if hasPwd {
                hashCode = (hashCode &* 31) &+ pwd.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "SigninReq"
    }
    override public func className() -> String {
        return "SigninReq"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:SigninReq = SigninReq()
        public func getMessage() -> SigninReq {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var nickName:String {
            get {
                return builderResult.nickName
            }
            set (value) {
                builderResult.hasNickName = true
                builderResult.nickName = value
            }
        }
        public var hasNickName:Bool {
            get {
                return builderResult.hasNickName
            }
        }
        @discardableResult
        public func setNickName(_ value:String) -> SigninReq.Builder {
            self.nickName = value
            return self
        }
        @discardableResult
        public func clearNickName() -> SigninReq.Builder{
            builderResult.hasNickName = false
            builderResult.nickName = nil
            return self
        }
        public var pwd:String {
            get {
                return builderResult.pwd
            }
            set (value) {
                builderResult.hasPwd = true
                builderResult.pwd = value
            }
        }
        public var hasPwd:Bool {
            get {
                return builderResult.hasPwd
            }
        }
        @discardableResult
        public func setPwd(_ value:String) -> SigninReq.Builder {
            self.pwd = value
            return self
        }
        @discardableResult
        public func clearPwd() -> SigninReq.Builder{
            builderResult.hasPwd = false
            builderResult.pwd = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> SigninReq.Builder {
            builderResult = SigninReq()
            return self
        }
        override public func clone() throws -> SigninReq.Builder {
            return try SigninReq.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> SigninReq {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> SigninReq {
            let returnMe:SigninReq = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:SigninReq) throws -> SigninReq.Builder {
            if other == SigninReq() {
                return self
            }
            if other.hasNickName {
                nickName = other.nickName
            }
            if other.hasPwd {
                pwd = other.pwd
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> SigninReq.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SigninReq.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    nickName = try codedInputStream.readString()

                case 18:
                    pwd = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> SigninReq.Builder {
            let resultDecodedBuilder = SigninReq.Builder()
            if let jsonValueNickName = jsonMap["nickName"] as? String {
                resultDecodedBuilder.nickName = jsonValueNickName
            }
            if let jsonValuePwd = jsonMap["pwd"] as? String {
                resultDecodedBuilder.pwd = jsonValuePwd
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> SigninReq.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try SigninReq.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class LoginReq : GeneratedMessage {
    public typealias BuilderType = LoginReq.Builder

    public static func == (lhs: LoginReq, rhs: LoginReq) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasNickName == rhs.hasNickName) && (!lhs.hasNickName || lhs.nickName == rhs.nickName)
        fieldCheck = fieldCheck && (lhs.hasPwd == rhs.hasPwd) && (!lhs.hasPwd || lhs.pwd == rhs.pwd)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var nickName:String! = nil
    public fileprivate(set) var hasNickName:Bool = false

    public fileprivate(set) var pwd:String! = nil
    public fileprivate(set) var hasPwd:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasNickName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(LoginReq.self): field \"nickName\" mark required")
        }
        if !hasPwd {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(LoginReq.self): field \"pwd\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasNickName {
            try codedOutputStream.writeString(fieldNumber: 1, value:nickName)
        }
        if hasPwd {
            try codedOutputStream.writeString(fieldNumber: 2, value:pwd)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasNickName {
            serialize_size += nickName.computeStringSize(fieldNumber: 1)
        }
        if hasPwd {
            serialize_size += pwd.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> LoginReq.Builder {
        return LoginReq.classBuilder() as! LoginReq.Builder
    }
    public func getBuilder() -> LoginReq.Builder {
        return classBuilder() as! LoginReq.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LoginReq.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LoginReq.Builder()
    }
    public func toBuilder() throws -> LoginReq.Builder {
        return try LoginReq.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:LoginReq) throws -> LoginReq.Builder {
        return try LoginReq.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasNickName {
            jsonMap["nickName"] = nickName
        }
        if hasPwd {
            jsonMap["pwd"] = pwd
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> LoginReq {
        return try LoginReq.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> LoginReq {
        return try LoginReq.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasNickName {
            output += "\(indent) nickName: \(nickName) \n"
        }
        if hasPwd {
            output += "\(indent) pwd: \(pwd) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasNickName {
                hashCode = (hashCode &* 31) &+ nickName.hashValue
            }
            if hasPwd {
                hashCode = (hashCode &* 31) &+ pwd.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "LoginReq"
    }
    override public func className() -> String {
        return "LoginReq"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:LoginReq = LoginReq()
        public func getMessage() -> LoginReq {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var nickName:String {
            get {
                return builderResult.nickName
            }
            set (value) {
                builderResult.hasNickName = true
                builderResult.nickName = value
            }
        }
        public var hasNickName:Bool {
            get {
                return builderResult.hasNickName
            }
        }
        @discardableResult
        public func setNickName(_ value:String) -> LoginReq.Builder {
            self.nickName = value
            return self
        }
        @discardableResult
        public func clearNickName() -> LoginReq.Builder{
            builderResult.hasNickName = false
            builderResult.nickName = nil
            return self
        }
        public var pwd:String {
            get {
                return builderResult.pwd
            }
            set (value) {
                builderResult.hasPwd = true
                builderResult.pwd = value
            }
        }
        public var hasPwd:Bool {
            get {
                return builderResult.hasPwd
            }
        }
        @discardableResult
        public func setPwd(_ value:String) -> LoginReq.Builder {
            self.pwd = value
            return self
        }
        @discardableResult
        public func clearPwd() -> LoginReq.Builder{
            builderResult.hasPwd = false
            builderResult.pwd = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> LoginReq.Builder {
            builderResult = LoginReq()
            return self
        }
        override public func clone() throws -> LoginReq.Builder {
            return try LoginReq.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> LoginReq {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> LoginReq {
            let returnMe:LoginReq = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:LoginReq) throws -> LoginReq.Builder {
            if other == LoginReq() {
                return self
            }
            if other.hasNickName {
                nickName = other.nickName
            }
            if other.hasPwd {
                pwd = other.pwd
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> LoginReq.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginReq.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    nickName = try codedInputStream.readString()

                case 18:
                    pwd = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> LoginReq.Builder {
            let resultDecodedBuilder = LoginReq.Builder()
            if let jsonValueNickName = jsonMap["nickName"] as? String {
                resultDecodedBuilder.nickName = jsonValueNickName
            }
            if let jsonValuePwd = jsonMap["pwd"] as? String {
                resultDecodedBuilder.pwd = jsonValuePwd
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> LoginReq.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try LoginReq.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class SiginRes : GeneratedMessage {
    public typealias BuilderType = SiginRes.Builder

    public static func == (lhs: SiginRes, rhs: SiginRes) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUid == rhs.hasUid) && (!lhs.hasUid || lhs.uid == rhs.uid)
        fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var uid:UInt32! = nil
    public fileprivate(set) var hasUid:Bool = false

    public fileprivate(set) var token:String! = nil
    public fileprivate(set) var hasToken:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasUid {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(SiginRes.self): field \"uid\" mark required")
        }
        if !hasToken {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(SiginRes.self): field \"token\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUid {
            try codedOutputStream.writeUInt32(fieldNumber: 1, value:uid)
        }
        if hasToken {
            try codedOutputStream.writeString(fieldNumber: 2, value:token)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUid {
            serialize_size += uid.computeUInt32Size(fieldNumber: 1)
        }
        if hasToken {
            serialize_size += token.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> SiginRes.Builder {
        return SiginRes.classBuilder() as! SiginRes.Builder
    }
    public func getBuilder() -> SiginRes.Builder {
        return classBuilder() as! SiginRes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return SiginRes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return SiginRes.Builder()
    }
    public func toBuilder() throws -> SiginRes.Builder {
        return try SiginRes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:SiginRes) throws -> SiginRes.Builder {
        return try SiginRes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUid {
            jsonMap["uid"] = UInt(uid)
        }
        if hasToken {
            jsonMap["token"] = token
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> SiginRes {
        return try SiginRes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> SiginRes {
        return try SiginRes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUid {
            output += "\(indent) uid: \(uid) \n"
        }
        if hasToken {
            output += "\(indent) token: \(token) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUid {
                hashCode = (hashCode &* 31) &+ uid.hashValue
            }
            if hasToken {
                hashCode = (hashCode &* 31) &+ token.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "SiginRes"
    }
    override public func className() -> String {
        return "SiginRes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:SiginRes = SiginRes()
        public func getMessage() -> SiginRes {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var uid:UInt32 {
            get {
                return builderResult.uid
            }
            set (value) {
                builderResult.hasUid = true
                builderResult.uid = value
            }
        }
        public var hasUid:Bool {
            get {
                return builderResult.hasUid
            }
        }
        @discardableResult
        public func setUid(_ value:UInt32) -> SiginRes.Builder {
            self.uid = value
            return self
        }
        @discardableResult
        public func clearUid() -> SiginRes.Builder{
            builderResult.hasUid = false
            builderResult.uid = nil
            return self
        }
        public var token:String {
            get {
                return builderResult.token
            }
            set (value) {
                builderResult.hasToken = true
                builderResult.token = value
            }
        }
        public var hasToken:Bool {
            get {
                return builderResult.hasToken
            }
        }
        @discardableResult
        public func setToken(_ value:String) -> SiginRes.Builder {
            self.token = value
            return self
        }
        @discardableResult
        public func clearToken() -> SiginRes.Builder{
            builderResult.hasToken = false
            builderResult.token = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> SiginRes.Builder {
            builderResult = SiginRes()
            return self
        }
        override public func clone() throws -> SiginRes.Builder {
            return try SiginRes.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> SiginRes {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> SiginRes {
            let returnMe:SiginRes = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:SiginRes) throws -> SiginRes.Builder {
            if other == SiginRes() {
                return self
            }
            if other.hasUid {
                uid = other.uid
            }
            if other.hasToken {
                token = other.token
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> SiginRes.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SiginRes.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    uid = try codedInputStream.readUInt32()

                case 18:
                    token = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> SiginRes.Builder {
            let resultDecodedBuilder = SiginRes.Builder()
            if let jsonValueUid = jsonMap["uid"] as? UInt {
                resultDecodedBuilder.uid = UInt32(jsonValueUid)
            } else if let jsonValueUid = jsonMap["uid"] as? String {
                resultDecodedBuilder.uid = UInt32(jsonValueUid)!
            }
            if let jsonValueToken = jsonMap["token"] as? String {
                resultDecodedBuilder.token = jsonValueToken
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> SiginRes.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try SiginRes.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class LoginRes : GeneratedMessage {
    public typealias BuilderType = LoginRes.Builder

    public static func == (lhs: LoginRes, rhs: LoginRes) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUid == rhs.hasUid) && (!lhs.hasUid || lhs.uid == rhs.uid)
        fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var uid:UInt32! = nil
    public fileprivate(set) var hasUid:Bool = false

    public fileprivate(set) var token:String! = nil
    public fileprivate(set) var hasToken:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasUid {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(LoginRes.self): field \"uid\" mark required")
        }
        if !hasToken {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(LoginRes.self): field \"token\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUid {
            try codedOutputStream.writeUInt32(fieldNumber: 1, value:uid)
        }
        if hasToken {
            try codedOutputStream.writeString(fieldNumber: 2, value:token)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUid {
            serialize_size += uid.computeUInt32Size(fieldNumber: 1)
        }
        if hasToken {
            serialize_size += token.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> LoginRes.Builder {
        return LoginRes.classBuilder() as! LoginRes.Builder
    }
    public func getBuilder() -> LoginRes.Builder {
        return classBuilder() as! LoginRes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LoginRes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LoginRes.Builder()
    }
    public func toBuilder() throws -> LoginRes.Builder {
        return try LoginRes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:LoginRes) throws -> LoginRes.Builder {
        return try LoginRes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUid {
            jsonMap["uid"] = UInt(uid)
        }
        if hasToken {
            jsonMap["token"] = token
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> LoginRes {
        return try LoginRes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> LoginRes {
        return try LoginRes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUid {
            output += "\(indent) uid: \(uid) \n"
        }
        if hasToken {
            output += "\(indent) token: \(token) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUid {
                hashCode = (hashCode &* 31) &+ uid.hashValue
            }
            if hasToken {
                hashCode = (hashCode &* 31) &+ token.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "LoginRes"
    }
    override public func className() -> String {
        return "LoginRes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:LoginRes = LoginRes()
        public func getMessage() -> LoginRes {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var uid:UInt32 {
            get {
                return builderResult.uid
            }
            set (value) {
                builderResult.hasUid = true
                builderResult.uid = value
            }
        }
        public var hasUid:Bool {
            get {
                return builderResult.hasUid
            }
        }
        @discardableResult
        public func setUid(_ value:UInt32) -> LoginRes.Builder {
            self.uid = value
            return self
        }
        @discardableResult
        public func clearUid() -> LoginRes.Builder{
            builderResult.hasUid = false
            builderResult.uid = nil
            return self
        }
        public var token:String {
            get {
                return builderResult.token
            }
            set (value) {
                builderResult.hasToken = true
                builderResult.token = value
            }
        }
        public var hasToken:Bool {
            get {
                return builderResult.hasToken
            }
        }
        @discardableResult
        public func setToken(_ value:String) -> LoginRes.Builder {
            self.token = value
            return self
        }
        @discardableResult
        public func clearToken() -> LoginRes.Builder{
            builderResult.hasToken = false
            builderResult.token = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> LoginRes.Builder {
            builderResult = LoginRes()
            return self
        }
        override public func clone() throws -> LoginRes.Builder {
            return try LoginRes.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> LoginRes {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> LoginRes {
            let returnMe:LoginRes = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:LoginRes) throws -> LoginRes.Builder {
            if other == LoginRes() {
                return self
            }
            if other.hasUid {
                uid = other.uid
            }
            if other.hasToken {
                token = other.token
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> LoginRes.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRes.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    uid = try codedInputStream.readUInt32()

                case 18:
                    token = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> LoginRes.Builder {
            let resultDecodedBuilder = LoginRes.Builder()
            if let jsonValueUid = jsonMap["uid"] as? UInt {
                resultDecodedBuilder.uid = UInt32(jsonValueUid)
            } else if let jsonValueUid = jsonMap["uid"] as? String {
                resultDecodedBuilder.uid = UInt32(jsonValueUid)!
            }
            if let jsonValueToken = jsonMap["token"] as? String {
                resultDecodedBuilder.token = jsonValueToken
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> LoginRes.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try LoginRes.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class LogoutReq : GeneratedMessage {
    public typealias BuilderType = LogoutReq.Builder

    public static func == (lhs: LogoutReq, rhs: LogoutReq) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUid == rhs.hasUid) && (!lhs.hasUid || lhs.uid == rhs.uid)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var uid:Int32! = nil
    public fileprivate(set) var hasUid:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasUid {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(LogoutReq.self): field \"uid\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUid {
            try codedOutputStream.writeInt32(fieldNumber: 1, value:uid)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUid {
            serialize_size += uid.computeInt32Size(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> LogoutReq.Builder {
        return LogoutReq.classBuilder() as! LogoutReq.Builder
    }
    public func getBuilder() -> LogoutReq.Builder {
        return classBuilder() as! LogoutReq.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LogoutReq.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LogoutReq.Builder()
    }
    public func toBuilder() throws -> LogoutReq.Builder {
        return try LogoutReq.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:LogoutReq) throws -> LogoutReq.Builder {
        return try LogoutReq.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUid {
            jsonMap["uid"] = Int(uid)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> LogoutReq {
        return try LogoutReq.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> LogoutReq {
        return try LogoutReq.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUid {
            output += "\(indent) uid: \(uid) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUid {
                hashCode = (hashCode &* 31) &+ uid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "LogoutReq"
    }
    override public func className() -> String {
        return "LogoutReq"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:LogoutReq = LogoutReq()
        public func getMessage() -> LogoutReq {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var uid:Int32 {
            get {
                return builderResult.uid
            }
            set (value) {
                builderResult.hasUid = true
                builderResult.uid = value
            }
        }
        public var hasUid:Bool {
            get {
                return builderResult.hasUid
            }
        }
        @discardableResult
        public func setUid(_ value:Int32) -> LogoutReq.Builder {
            self.uid = value
            return self
        }
        @discardableResult
        public func clearUid() -> LogoutReq.Builder{
            builderResult.hasUid = false
            builderResult.uid = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> LogoutReq.Builder {
            builderResult = LogoutReq()
            return self
        }
        override public func clone() throws -> LogoutReq.Builder {
            return try LogoutReq.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> LogoutReq {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> LogoutReq {
            let returnMe:LogoutReq = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:LogoutReq) throws -> LogoutReq.Builder {
            if other == LogoutReq() {
                return self
            }
            if other.hasUid {
                uid = other.uid
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> LogoutReq.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LogoutReq.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    uid = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> LogoutReq.Builder {
            let resultDecodedBuilder = LogoutReq.Builder()
            if let jsonValueUid = jsonMap["uid"] as? Int {
                resultDecodedBuilder.uid = Int32(jsonValueUid)
            } else if let jsonValueUid = jsonMap["uid"] as? String {
                resultDecodedBuilder.uid = Int32(jsonValueUid)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> LogoutReq.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try LogoutReq.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class CommonRes : GeneratedMessage {
    public typealias BuilderType = CommonRes.Builder

    public static func == (lhs: CommonRes, rhs: CommonRes) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasMessage == rhs.hasMessage) && (!lhs.hasMessage || lhs.message == rhs.message)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var message:String! = nil
    public fileprivate(set) var hasMessage:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasMessage {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(CommonRes.self): field \"message\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasMessage {
            try codedOutputStream.writeString(fieldNumber: 1, value:message)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasMessage {
            serialize_size += message.computeStringSize(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> CommonRes.Builder {
        return CommonRes.classBuilder() as! CommonRes.Builder
    }
    public func getBuilder() -> CommonRes.Builder {
        return classBuilder() as! CommonRes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return CommonRes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return CommonRes.Builder()
    }
    public func toBuilder() throws -> CommonRes.Builder {
        return try CommonRes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:CommonRes) throws -> CommonRes.Builder {
        return try CommonRes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasMessage {
            jsonMap["message"] = message
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> CommonRes {
        return try CommonRes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> CommonRes {
        return try CommonRes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasMessage {
            output += "\(indent) message: \(message) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMessage {
                hashCode = (hashCode &* 31) &+ message.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "CommonRes"
    }
    override public func className() -> String {
        return "CommonRes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:CommonRes = CommonRes()
        public func getMessage() -> CommonRes {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var message:String {
            get {
                return builderResult.message
            }
            set (value) {
                builderResult.hasMessage = true
                builderResult.message = value
            }
        }
        public var hasMessage:Bool {
            get {
                return builderResult.hasMessage
            }
        }
        @discardableResult
        public func setMessage(_ value:String) -> CommonRes.Builder {
            self.message = value
            return self
        }
        @discardableResult
        public func clearMessage() -> CommonRes.Builder{
            builderResult.hasMessage = false
            builderResult.message = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> CommonRes.Builder {
            builderResult = CommonRes()
            return self
        }
        override public func clone() throws -> CommonRes.Builder {
            return try CommonRes.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> CommonRes {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> CommonRes {
            let returnMe:CommonRes = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:CommonRes) throws -> CommonRes.Builder {
            if other == CommonRes() {
                return self
            }
            if other.hasMessage {
                message = other.message
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> CommonRes.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CommonRes.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    message = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> CommonRes.Builder {
            let resultDecodedBuilder = CommonRes.Builder()
            if let jsonValueMessage = jsonMap["message"] as? String {
                resultDecodedBuilder.message = jsonValueMessage
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> CommonRes.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try CommonRes.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension UserMsg: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<UserMsg> {
        var mergedArray = Array<UserMsg>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> UserMsg? {
        return try UserMsg.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "cmd": return self.cmd
        case "body": return self.body
        default: return nil
        }
    }
}
extension UserMsg.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = UserMsg
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "cmd": return self.cmd
            case "body": return self.body
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "cmd":
                guard let newSubscriptValue = newSubscriptValue as? UserCmd else {
                    return
                }
                self.cmd = newSubscriptValue
            case "body":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.body = newSubscriptValue
            default: return
            }
        }
    }
}
extension SigninReq: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<SigninReq> {
        var mergedArray = Array<SigninReq>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> SigninReq? {
        return try SigninReq.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> SigninReq {
        return try SigninReq.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> SigninReq {
        return try SigninReq.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> SigninReq {
        return try SigninReq.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> SigninReq {
        return try SigninReq.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> SigninReq {
        return try SigninReq.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SigninReq {
        return try SigninReq.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "nickName": return self.nickName
        case "pwd": return self.pwd
        default: return nil
        }
    }
}
extension SigninReq.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = SigninReq
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "nickName": return self.nickName
            case "pwd": return self.pwd
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "nickName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nickName = newSubscriptValue
            case "pwd":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.pwd = newSubscriptValue
            default: return
            }
        }
    }
}
extension LoginReq: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<LoginReq> {
        var mergedArray = Array<LoginReq>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> LoginReq? {
        return try LoginReq.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> LoginReq {
        return try LoginReq.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> LoginReq {
        return try LoginReq.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> LoginReq {
        return try LoginReq.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> LoginReq {
        return try LoginReq.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> LoginReq {
        return try LoginReq.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginReq {
        return try LoginReq.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "nickName": return self.nickName
        case "pwd": return self.pwd
        default: return nil
        }
    }
}
extension LoginReq.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = LoginReq
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "nickName": return self.nickName
            case "pwd": return self.pwd
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "nickName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nickName = newSubscriptValue
            case "pwd":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.pwd = newSubscriptValue
            default: return
            }
        }
    }
}
extension SiginRes: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<SiginRes> {
        var mergedArray = Array<SiginRes>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> SiginRes? {
        return try SiginRes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> SiginRes {
        return try SiginRes.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> SiginRes {
        return try SiginRes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> SiginRes {
        return try SiginRes.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> SiginRes {
        return try SiginRes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> SiginRes {
        return try SiginRes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SiginRes {
        return try SiginRes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uid": return self.uid
        case "token": return self.token
        default: return nil
        }
    }
}
extension SiginRes.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = SiginRes
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uid": return self.uid
            case "token": return self.token
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uid":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.uid = newSubscriptValue
            case "token":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.token = newSubscriptValue
            default: return
            }
        }
    }
}
extension LoginRes: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<LoginRes> {
        var mergedArray = Array<LoginRes>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> LoginRes? {
        return try LoginRes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> LoginRes {
        return try LoginRes.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> LoginRes {
        return try LoginRes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> LoginRes {
        return try LoginRes.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRes {
        return try LoginRes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> LoginRes {
        return try LoginRes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRes {
        return try LoginRes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uid": return self.uid
        case "token": return self.token
        default: return nil
        }
    }
}
extension LoginRes.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = LoginRes
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uid": return self.uid
            case "token": return self.token
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uid":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.uid = newSubscriptValue
            case "token":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.token = newSubscriptValue
            default: return
            }
        }
    }
}
extension LogoutReq: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<LogoutReq> {
        var mergedArray = Array<LogoutReq>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> LogoutReq? {
        return try LogoutReq.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> LogoutReq {
        return try LogoutReq.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> LogoutReq {
        return try LogoutReq.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> LogoutReq {
        return try LogoutReq.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> LogoutReq {
        return try LogoutReq.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> LogoutReq {
        return try LogoutReq.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LogoutReq {
        return try LogoutReq.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uid": return self.uid
        default: return nil
        }
    }
}
extension LogoutReq.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = LogoutReq
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uid": return self.uid
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uid":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.uid = newSubscriptValue
            default: return
            }
        }
    }
}
extension CommonRes: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<CommonRes> {
        var mergedArray = Array<CommonRes>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> CommonRes? {
        return try CommonRes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> CommonRes {
        return try CommonRes.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> CommonRes {
        return try CommonRes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> CommonRes {
        return try CommonRes.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> CommonRes {
        return try CommonRes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> CommonRes {
        return try CommonRes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CommonRes {
        return try CommonRes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "message": return self.message
        default: return nil
        }
    }
}
extension CommonRes.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = CommonRes
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "message": return self.message
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "message":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.message = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
