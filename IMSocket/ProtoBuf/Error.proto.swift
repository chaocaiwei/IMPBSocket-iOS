/// Generated by the Protocol Buffers 3.5.1 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "error.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ErrorRoot {
    public static let `default` = ErrorRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}



//Enum type declaration start 

public enum ErrorType:Int32, GeneratedEnum {
    case invalidParams = 1
    public func toString() -> String {
        switch self {
        case .invalidParams: return "invalid_params"
        }
    }
    public static func fromString(_ str:String) throws -> ErrorType {
        switch str {
        case "invalid_params":    return .invalidParams
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .invalidParams: return ".invalidParams"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:ErrorType, rhs:ErrorType) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 

final public class Error : GeneratedMessage {
    public typealias BuilderType = Error.Builder

    public static func == (lhs: Error, rhs: Error) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
        fieldCheck = fieldCheck && (lhs.hasMsg == rhs.hasMsg) && (!lhs.hasMsg || lhs.msg == rhs.msg)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var type:ErrorType = ErrorType.invalidParams
    public fileprivate(set) var hasType:Bool = false
    public fileprivate(set) var msg:String! = nil
    public fileprivate(set) var hasMsg:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasType {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(Error.self): field \"type\" mark required")
        }
        if !hasMsg {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(Error.self): field \"msg\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasType {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:type.rawValue)
        }
        if hasMsg {
            try codedOutputStream.writeString(fieldNumber: 2, value:msg)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if (hasType) {
            serialize_size += type.rawValue.computeEnumSize(fieldNumber: 1)
        }
        if hasMsg {
            serialize_size += msg.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Error.Builder {
        return Error.classBuilder() as! Error.Builder
    }
    public func getBuilder() -> Error.Builder {
        return classBuilder() as! Error.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Error.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Error.Builder()
    }
    public func toBuilder() throws -> Error.Builder {
        return try Error.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Error) throws -> Error.Builder {
        return try Error.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasType {
            jsonMap["type"] = type.toString()
        }
        if hasMsg {
            jsonMap["msg"] = msg
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Error {
        return try Error.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Error {
        return try Error.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if (hasType) {
            output += "\(indent) type: \(type.description)\n"
        }
        if hasMsg {
            output += "\(indent) msg: \(msg) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasType {
                 hashCode = (hashCode &* 31) &+ type.hashValue
            }
            if hasMsg {
                hashCode = (hashCode &* 31) &+ msg.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Error"
    }
    override public func className() -> String {
        return "Error"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Error = Error()
        public func getMessage() -> Error {
            return builderResult
        }

        required override public init () {
            super.init()
        }
            public var type:ErrorType {
                get {
                    return builderResult.type
                }
                set (value) {
                    builderResult.hasType = true
                    builderResult.type = value
                }
            }
            public var hasType:Bool{
                get {
                    return builderResult.hasType
                }
            }
        @discardableResult
            public func setType(_ value:ErrorType) -> Error.Builder {
              self.type = value
              return self
            }
        @discardableResult
            public func clearType() -> Error.Builder {
               builderResult.hasType = false
               builderResult.type = .invalidParams
               return self
            }
        public var msg:String {
            get {
                return builderResult.msg
            }
            set (value) {
                builderResult.hasMsg = true
                builderResult.msg = value
            }
        }
        public var hasMsg:Bool {
            get {
                return builderResult.hasMsg
            }
        }
        @discardableResult
        public func setMsg(_ value:String) -> Error.Builder {
            self.msg = value
            return self
        }
        @discardableResult
        public func clearMsg() -> Error.Builder{
            builderResult.hasMsg = false
            builderResult.msg = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Error.Builder {
            builderResult = Error()
            return self
        }
        override public func clone() throws -> Error.Builder {
            return try Error.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Error {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Error {
            let returnMe:Error = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Error) throws -> Error.Builder {
            if other == Error() {
                return self
            }
            if other.hasType {
                type = other.type
            }
            if other.hasMsg {
                msg = other.msg
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Error.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Error.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    let valueInttype = try codedInputStream.readEnum()
                    if let enumstype = ErrorType(rawValue:valueInttype){
                        type = enumstype
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueInttype))
                    }

                case 18:
                    msg = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Error.Builder {
            let resultDecodedBuilder = Error.Builder()
            if let jsonValueType = jsonMap["type"] as? String {
                resultDecodedBuilder.type = try ErrorType.fromString(jsonValueType)
            }
            if let jsonValueMsg = jsonMap["msg"] as? String {
                resultDecodedBuilder.msg = jsonValueMsg
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Error.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Error.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension Error: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Error> {
        var mergedArray = Array<Error>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Error? {
        return try Error.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Error {
        return try Error.Builder().mergeFrom(data: data, extensionRegistry:ErrorRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Error {
        return try Error.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Error {
        return try Error.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Error {
        return try Error.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Error {
        return try Error.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Error {
        return try Error.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "type": return self.type
        case "msg": return self.msg
        default: return nil
        }
    }
}
extension Error.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Error
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "type": return self.type
            case "msg": return self.msg
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? ErrorType else {
                    return
                }
                self.type = newSubscriptValue
            case "msg":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.msg = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
