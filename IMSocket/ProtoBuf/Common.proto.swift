/// Generated by the Protocol Buffers 3.5.1 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "common.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct CommonRoot {
    public static let `default` = CommonRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}



//Enum type declaration start 

public enum CommonMethod:Int32, GeneratedEnum {
    case user = 0
    case message = 1
    case friend = 2
    public func toString() -> String {
        switch self {
        case .user: return "user"
        case .message: return "message"
        case .friend: return "friend"
        }
    }
    public static func fromString(_ str:String) throws -> CommonMethod {
        switch str {
        case "user":    return .user
        case "message":    return .message
        case "friend":    return .friend
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .user: return ".user"
        case .message: return ".message"
        case .friend: return ".friend"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:CommonMethod, rhs:CommonMethod) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 

final public class Common : GeneratedMessage {
    public typealias BuilderType = Common.Builder

    public static func == (lhs: Common, rhs: Common) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasMethod == rhs.hasMethod) && (!lhs.hasMethod || lhs.method == rhs.method)
        fieldCheck = fieldCheck && (lhs.hasBody == rhs.hasBody) && (!lhs.hasBody || lhs.body == rhs.body)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var method:CommonMethod = CommonMethod.user
    public fileprivate(set) var hasMethod:Bool = false
    public fileprivate(set) var body:Data! = nil
    public fileprivate(set) var hasBody:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasMethod {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(Common.self): field \"method\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasMethod {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:method.rawValue)
        }
        if hasBody {
            try codedOutputStream.writeData(fieldNumber: 2, value:body)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if (hasMethod) {
            serialize_size += method.rawValue.computeEnumSize(fieldNumber: 1)
        }
        if hasBody {
            serialize_size += body.computeDataSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Common.Builder {
        return Common.classBuilder() as! Common.Builder
    }
    public func getBuilder() -> Common.Builder {
        return classBuilder() as! Common.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Common.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Common.Builder()
    }
    public func toBuilder() throws -> Common.Builder {
        return try Common.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Common) throws -> Common.Builder {
        return try Common.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasMethod {
            jsonMap["method"] = method.toString()
        }
        if hasBody {
            jsonMap["body"] = body.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Common {
        return try Common.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Common {
        return try Common.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if (hasMethod) {
            output += "\(indent) method: \(method.description)\n"
        }
        if hasBody {
            output += "\(indent) body: \(body) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMethod {
                 hashCode = (hashCode &* 31) &+ method.hashValue
            }
            if hasBody {
                hashCode = (hashCode &* 31) &+ body.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Common"
    }
    override public func className() -> String {
        return "Common"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Common = Common()
        public func getMessage() -> Common {
            return builderResult
        }

        required override public init () {
            super.init()
        }
            public var method:CommonMethod {
                get {
                    return builderResult.method
                }
                set (value) {
                    builderResult.hasMethod = true
                    builderResult.method = value
                }
            }
            public var hasMethod:Bool{
                get {
                    return builderResult.hasMethod
                }
            }
        @discardableResult
            public func setMethod(_ value:CommonMethod) -> Common.Builder {
              self.method = value
              return self
            }
        @discardableResult
            public func clearMethod() -> Common.Builder {
               builderResult.hasMethod = false
               builderResult.method = .user
               return self
            }
        public var body:Data {
            get {
                return builderResult.body
            }
            set (value) {
                builderResult.hasBody = true
                builderResult.body = value
            }
        }
        public var hasBody:Bool {
            get {
                return builderResult.hasBody
            }
        }
        @discardableResult
        public func setBody(_ value:Data) -> Common.Builder {
            self.body = value
            return self
        }
        @discardableResult
        public func clearBody() -> Common.Builder{
            builderResult.hasBody = false
            builderResult.body = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Common.Builder {
            builderResult = Common()
            return self
        }
        override public func clone() throws -> Common.Builder {
            return try Common.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Common {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Common {
            let returnMe:Common = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Common) throws -> Common.Builder {
            if other == Common() {
                return self
            }
            if other.hasMethod {
                method = other.method
            }
            if other.hasBody {
                body = other.body
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Common.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    let valueIntmethod = try codedInputStream.readEnum()
                    if let enumsmethod = CommonMethod(rawValue:valueIntmethod){
                        method = enumsmethod
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntmethod))
                    }

                case 18:
                    body = try codedInputStream.readData()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Common.Builder {
            let resultDecodedBuilder = Common.Builder()
            if let jsonValueMethod = jsonMap["method"] as? String {
                resultDecodedBuilder.method = try CommonMethod.fromString(jsonValueMethod)
            }
            if let jsonValueBody = jsonMap["body"] as? String {
                resultDecodedBuilder.body = Data(base64Encoded:jsonValueBody, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Common.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Common.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension Common: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Common> {
        var mergedArray = Array<Common>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Common? {
        return try Common.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Common {
        return try Common.Builder().mergeFrom(data: data, extensionRegistry:CommonRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Common {
        return try Common.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Common {
        return try Common.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Common {
        return try Common.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Common {
        return try Common.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Common {
        return try Common.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "method": return self.method
        case "body": return self.body
        default: return nil
        }
    }
}
extension Common.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Common
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "method": return self.method
            case "body": return self.body
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "method":
                guard let newSubscriptValue = newSubscriptValue as? CommonMethod else {
                    return
                }
                self.method = newSubscriptValue
            case "body":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.body = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
