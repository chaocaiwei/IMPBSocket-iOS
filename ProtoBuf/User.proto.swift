/// Generated by the Protocol Buffers 3.5.1 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "user.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct UserRoot {
    public static let `default` = UserRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}



//Enum type declaration start 

public enum UserCmd:Int32, GeneratedEnum {
    case userCmdSignIn = 0
    case userCmdLogin = 2
    case userCmdLogout = 3
    case userCmdUserInfo = 4
    case userCmdUserById = 5
    public func toString() -> String {
        switch self {
        case .userCmdSignIn: return "User_cmd_sign_in"
        case .userCmdLogin: return "User_cmd_login"
        case .userCmdLogout: return "User_cmd_logout"
        case .userCmdUserInfo: return "User_cmd_user_info"
        case .userCmdUserById: return "User_cmd_user_by_id"
        }
    }
    public static func fromString(_ str:String) throws -> UserCmd {
        switch str {
        case "User_cmd_sign_in":    return .userCmdSignIn
        case "User_cmd_login":    return .userCmdLogin
        case "User_cmd_logout":    return .userCmdLogout
        case "User_cmd_user_info":    return .userCmdUserInfo
        case "User_cmd_user_by_id":    return .userCmdUserById
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .userCmdSignIn: return ".userCmdSignIn"
        case .userCmdLogin: return ".userCmdLogin"
        case .userCmdLogout: return ".userCmdLogout"
        case .userCmdUserInfo: return ".userCmdUserInfo"
        case .userCmdUserById: return ".userCmdUserById"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:UserCmd, rhs:UserCmd) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 

final public class UserMsg : GeneratedMessage {
    public typealias BuilderType = UserMsg.Builder

    public static func == (lhs: UserMsg, rhs: UserMsg) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasCmd == rhs.hasCmd) && (!lhs.hasCmd || lhs.cmd == rhs.cmd)
        fieldCheck = fieldCheck && (lhs.hasBody == rhs.hasBody) && (!lhs.hasBody || lhs.body == rhs.body)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var cmd:UserCmd = UserCmd.userCmdSignIn
    public fileprivate(set) var hasCmd:Bool = false
    public fileprivate(set) var body:Data! = nil
    public fileprivate(set) var hasBody:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasCmd {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:cmd.rawValue)
        }
        if hasBody {
            try codedOutputStream.writeData(fieldNumber: 2, value:body)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if (hasCmd) {
            serialize_size += cmd.rawValue.computeEnumSize(fieldNumber: 1)
        }
        if hasBody {
            serialize_size += body.computeDataSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> UserMsg.Builder {
        return UserMsg.classBuilder() as! UserMsg.Builder
    }
    public func getBuilder() -> UserMsg.Builder {
        return classBuilder() as! UserMsg.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserMsg.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserMsg.Builder()
    }
    public func toBuilder() throws -> UserMsg.Builder {
        return try UserMsg.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:UserMsg) throws -> UserMsg.Builder {
        return try UserMsg.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasCmd {
            jsonMap["cmd"] = cmd.toString()
        }
        if hasBody {
            jsonMap["body"] = body.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> UserMsg {
        return try UserMsg.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> UserMsg {
        return try UserMsg.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if (hasCmd) {
            output += "\(indent) cmd: \(cmd.description)\n"
        }
        if hasBody {
            output += "\(indent) body: \(body) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCmd {
                 hashCode = (hashCode &* 31) &+ cmd.hashValue
            }
            if hasBody {
                hashCode = (hashCode &* 31) &+ body.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "UserMsg"
    }
    override public func className() -> String {
        return "UserMsg"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:UserMsg = UserMsg()
        public func getMessage() -> UserMsg {
            return builderResult
        }

        required override public init () {
            super.init()
        }
            public var cmd:UserCmd {
                get {
                    return builderResult.cmd
                }
                set (value) {
                    builderResult.hasCmd = true
                    builderResult.cmd = value
                }
            }
            public var hasCmd:Bool{
                get {
                    return builderResult.hasCmd
                }
            }
        @discardableResult
            public func setCmd(_ value:UserCmd) -> UserMsg.Builder {
              self.cmd = value
              return self
            }
        @discardableResult
            public func clearCmd() -> UserMsg.Builder {
               builderResult.hasCmd = false
               builderResult.cmd = .userCmdSignIn
               return self
            }
        public var body:Data {
            get {
                return builderResult.body
            }
            set (value) {
                builderResult.hasBody = true
                builderResult.body = value
            }
        }
        public var hasBody:Bool {
            get {
                return builderResult.hasBody
            }
        }
        @discardableResult
        public func setBody(_ value:Data) -> UserMsg.Builder {
            self.body = value
            return self
        }
        @discardableResult
        public func clearBody() -> UserMsg.Builder{
            builderResult.hasBody = false
            builderResult.body = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> UserMsg.Builder {
            builderResult = UserMsg()
            return self
        }
        override public func clone() throws -> UserMsg.Builder {
            return try UserMsg.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> UserMsg {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> UserMsg {
            let returnMe:UserMsg = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:UserMsg) throws -> UserMsg.Builder {
            if other == UserMsg() {
                return self
            }
            if other.hasCmd {
                cmd = other.cmd
            }
            if other.hasBody {
                body = other.body
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> UserMsg.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserMsg.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    let valueIntcmd = try codedInputStream.readEnum()
                    if let enumscmd = UserCmd(rawValue:valueIntcmd){
                        cmd = enumscmd
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntcmd))
                    }

                case 18:
                    body = try codedInputStream.readData()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> UserMsg.Builder {
            let resultDecodedBuilder = UserMsg.Builder()
            if let jsonValueCmd = jsonMap["cmd"] as? String {
                resultDecodedBuilder.cmd = try UserCmd.fromString(jsonValueCmd)
            }
            if let jsonValueBody = jsonMap["body"] as? String {
                resultDecodedBuilder.body = Data(base64Encoded:jsonValueBody, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> UserMsg.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try UserMsg.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class SigninRequest : GeneratedMessage {
    public typealias BuilderType = SigninRequest.Builder

    public static func == (lhs: SigninRequest, rhs: SigninRequest) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasNickName == rhs.hasNickName) && (!lhs.hasNickName || lhs.nickName == rhs.nickName)
        fieldCheck = fieldCheck && (lhs.hasPwd == rhs.hasPwd) && (!lhs.hasPwd || lhs.pwd == rhs.pwd)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var nickName:String! = nil
    public fileprivate(set) var hasNickName:Bool = false

    public fileprivate(set) var pwd:String! = nil
    public fileprivate(set) var hasPwd:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasNickName {
            try codedOutputStream.writeString(fieldNumber: 1, value:nickName)
        }
        if hasPwd {
            try codedOutputStream.writeString(fieldNumber: 2, value:pwd)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasNickName {
            serialize_size += nickName.computeStringSize(fieldNumber: 1)
        }
        if hasPwd {
            serialize_size += pwd.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> SigninRequest.Builder {
        return SigninRequest.classBuilder() as! SigninRequest.Builder
    }
    public func getBuilder() -> SigninRequest.Builder {
        return classBuilder() as! SigninRequest.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return SigninRequest.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return SigninRequest.Builder()
    }
    public func toBuilder() throws -> SigninRequest.Builder {
        return try SigninRequest.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:SigninRequest) throws -> SigninRequest.Builder {
        return try SigninRequest.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasNickName {
            jsonMap["nickName"] = nickName
        }
        if hasPwd {
            jsonMap["pwd"] = pwd
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> SigninRequest {
        return try SigninRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> SigninRequest {
        return try SigninRequest.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasNickName {
            output += "\(indent) nickName: \(nickName) \n"
        }
        if hasPwd {
            output += "\(indent) pwd: \(pwd) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasNickName {
                hashCode = (hashCode &* 31) &+ nickName.hashValue
            }
            if hasPwd {
                hashCode = (hashCode &* 31) &+ pwd.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "SigninRequest"
    }
    override public func className() -> String {
        return "SigninRequest"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:SigninRequest = SigninRequest()
        public func getMessage() -> SigninRequest {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var nickName:String {
            get {
                return builderResult.nickName
            }
            set (value) {
                builderResult.hasNickName = true
                builderResult.nickName = value
            }
        }
        public var hasNickName:Bool {
            get {
                return builderResult.hasNickName
            }
        }
        @discardableResult
        public func setNickName(_ value:String) -> SigninRequest.Builder {
            self.nickName = value
            return self
        }
        @discardableResult
        public func clearNickName() -> SigninRequest.Builder{
            builderResult.hasNickName = false
            builderResult.nickName = nil
            return self
        }
        public var pwd:String {
            get {
                return builderResult.pwd
            }
            set (value) {
                builderResult.hasPwd = true
                builderResult.pwd = value
            }
        }
        public var hasPwd:Bool {
            get {
                return builderResult.hasPwd
            }
        }
        @discardableResult
        public func setPwd(_ value:String) -> SigninRequest.Builder {
            self.pwd = value
            return self
        }
        @discardableResult
        public func clearPwd() -> SigninRequest.Builder{
            builderResult.hasPwd = false
            builderResult.pwd = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> SigninRequest.Builder {
            builderResult = SigninRequest()
            return self
        }
        override public func clone() throws -> SigninRequest.Builder {
            return try SigninRequest.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> SigninRequest {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> SigninRequest {
            let returnMe:SigninRequest = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:SigninRequest) throws -> SigninRequest.Builder {
            if other == SigninRequest() {
                return self
            }
            if other.hasNickName {
                nickName = other.nickName
            }
            if other.hasPwd {
                pwd = other.pwd
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> SigninRequest.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SigninRequest.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    nickName = try codedInputStream.readString()

                case 18:
                    pwd = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> SigninRequest.Builder {
            let resultDecodedBuilder = SigninRequest.Builder()
            if let jsonValueNickName = jsonMap["nickName"] as? String {
                resultDecodedBuilder.nickName = jsonValueNickName
            }
            if let jsonValuePwd = jsonMap["pwd"] as? String {
                resultDecodedBuilder.pwd = jsonValuePwd
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> SigninRequest.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try SigninRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class LoginRequest : GeneratedMessage {
    public typealias BuilderType = LoginRequest.Builder

    public static func == (lhs: LoginRequest, rhs: LoginRequest) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasNickName == rhs.hasNickName) && (!lhs.hasNickName || lhs.nickName == rhs.nickName)
        fieldCheck = fieldCheck && (lhs.hasPwd == rhs.hasPwd) && (!lhs.hasPwd || lhs.pwd == rhs.pwd)
        fieldCheck = fieldCheck && (lhs.hasIp == rhs.hasIp) && (!lhs.hasIp || lhs.ip == rhs.ip)
        fieldCheck = fieldCheck && (lhs.hasPort == rhs.hasPort) && (!lhs.hasPort || lhs.port == rhs.port)
        fieldCheck = fieldCheck && (lhs.hasDeviceName == rhs.hasDeviceName) && (!lhs.hasDeviceName || lhs.deviceName == rhs.deviceName)
        fieldCheck = fieldCheck && (lhs.hasDeviceId == rhs.hasDeviceId) && (!lhs.hasDeviceId || lhs.deviceId == rhs.deviceId)
        fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// 用户名
    public fileprivate(set) var nickName:String! = nil
    public fileprivate(set) var hasNickName:Bool = false

    /// 密码
    public fileprivate(set) var pwd:String! = nil
    public fileprivate(set) var hasPwd:Bool = false

    /// 设备当前的ip
    public fileprivate(set) var ip:String! = nil
    public fileprivate(set) var hasIp:Bool = false

    /// 设备绑定的端口
    public fileprivate(set) var port:Int32! = nil
    public fileprivate(set) var hasPort:Bool = false

    /// iOS/Andoird
    public fileprivate(set) var deviceName:String! = nil
    public fileprivate(set) var hasDeviceName:Bool = false

    /// 设备标识符
    public fileprivate(set) var deviceId:String! = nil
    public fileprivate(set) var hasDeviceId:Bool = false

    /// 软件版本
    public fileprivate(set) var version:String! = nil
    public fileprivate(set) var hasVersion:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasNickName {
            try codedOutputStream.writeString(fieldNumber: 1, value:nickName)
        }
        if hasPwd {
            try codedOutputStream.writeString(fieldNumber: 2, value:pwd)
        }
        if hasIp {
            try codedOutputStream.writeString(fieldNumber: 3, value:ip)
        }
        if hasPort {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:port)
        }
        if hasDeviceName {
            try codedOutputStream.writeString(fieldNumber: 5, value:deviceName)
        }
        if hasDeviceId {
            try codedOutputStream.writeString(fieldNumber: 6, value:deviceId)
        }
        if hasVersion {
            try codedOutputStream.writeString(fieldNumber: 7, value:version)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasNickName {
            serialize_size += nickName.computeStringSize(fieldNumber: 1)
        }
        if hasPwd {
            serialize_size += pwd.computeStringSize(fieldNumber: 2)
        }
        if hasIp {
            serialize_size += ip.computeStringSize(fieldNumber: 3)
        }
        if hasPort {
            serialize_size += port.computeInt32Size(fieldNumber: 4)
        }
        if hasDeviceName {
            serialize_size += deviceName.computeStringSize(fieldNumber: 5)
        }
        if hasDeviceId {
            serialize_size += deviceId.computeStringSize(fieldNumber: 6)
        }
        if hasVersion {
            serialize_size += version.computeStringSize(fieldNumber: 7)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> LoginRequest.Builder {
        return LoginRequest.classBuilder() as! LoginRequest.Builder
    }
    public func getBuilder() -> LoginRequest.Builder {
        return classBuilder() as! LoginRequest.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LoginRequest.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LoginRequest.Builder()
    }
    public func toBuilder() throws -> LoginRequest.Builder {
        return try LoginRequest.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:LoginRequest) throws -> LoginRequest.Builder {
        return try LoginRequest.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasNickName {
            jsonMap["nickName"] = nickName
        }
        if hasPwd {
            jsonMap["pwd"] = pwd
        }
        if hasIp {
            jsonMap["ip"] = ip
        }
        if hasPort {
            jsonMap["port"] = Int(port)
        }
        if hasDeviceName {
            jsonMap["deviceName"] = deviceName
        }
        if hasDeviceId {
            jsonMap["deviceId"] = deviceId
        }
        if hasVersion {
            jsonMap["version"] = version
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> LoginRequest {
        return try LoginRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> LoginRequest {
        return try LoginRequest.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasNickName {
            output += "\(indent) nickName: \(nickName) \n"
        }
        if hasPwd {
            output += "\(indent) pwd: \(pwd) \n"
        }
        if hasIp {
            output += "\(indent) ip: \(ip) \n"
        }
        if hasPort {
            output += "\(indent) port: \(port) \n"
        }
        if hasDeviceName {
            output += "\(indent) deviceName: \(deviceName) \n"
        }
        if hasDeviceId {
            output += "\(indent) deviceId: \(deviceId) \n"
        }
        if hasVersion {
            output += "\(indent) version: \(version) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasNickName {
                hashCode = (hashCode &* 31) &+ nickName.hashValue
            }
            if hasPwd {
                hashCode = (hashCode &* 31) &+ pwd.hashValue
            }
            if hasIp {
                hashCode = (hashCode &* 31) &+ ip.hashValue
            }
            if hasPort {
                hashCode = (hashCode &* 31) &+ port.hashValue
            }
            if hasDeviceName {
                hashCode = (hashCode &* 31) &+ deviceName.hashValue
            }
            if hasDeviceId {
                hashCode = (hashCode &* 31) &+ deviceId.hashValue
            }
            if hasVersion {
                hashCode = (hashCode &* 31) &+ version.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "LoginRequest"
    }
    override public func className() -> String {
        return "LoginRequest"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:LoginRequest = LoginRequest()
        public func getMessage() -> LoginRequest {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// 用户名
        public var nickName:String {
            get {
                return builderResult.nickName
            }
            set (value) {
                builderResult.hasNickName = true
                builderResult.nickName = value
            }
        }
        public var hasNickName:Bool {
            get {
                return builderResult.hasNickName
            }
        }
        @discardableResult
        public func setNickName(_ value:String) -> LoginRequest.Builder {
            self.nickName = value
            return self
        }
        @discardableResult
        public func clearNickName() -> LoginRequest.Builder{
            builderResult.hasNickName = false
            builderResult.nickName = nil
            return self
        }
        /// 密码
        public var pwd:String {
            get {
                return builderResult.pwd
            }
            set (value) {
                builderResult.hasPwd = true
                builderResult.pwd = value
            }
        }
        public var hasPwd:Bool {
            get {
                return builderResult.hasPwd
            }
        }
        @discardableResult
        public func setPwd(_ value:String) -> LoginRequest.Builder {
            self.pwd = value
            return self
        }
        @discardableResult
        public func clearPwd() -> LoginRequest.Builder{
            builderResult.hasPwd = false
            builderResult.pwd = nil
            return self
        }
        /// 设备当前的ip
        public var ip:String {
            get {
                return builderResult.ip
            }
            set (value) {
                builderResult.hasIp = true
                builderResult.ip = value
            }
        }
        public var hasIp:Bool {
            get {
                return builderResult.hasIp
            }
        }
        @discardableResult
        public func setIp(_ value:String) -> LoginRequest.Builder {
            self.ip = value
            return self
        }
        @discardableResult
        public func clearIp() -> LoginRequest.Builder{
            builderResult.hasIp = false
            builderResult.ip = nil
            return self
        }
        /// 设备绑定的端口
        public var port:Int32 {
            get {
                return builderResult.port
            }
            set (value) {
                builderResult.hasPort = true
                builderResult.port = value
            }
        }
        public var hasPort:Bool {
            get {
                return builderResult.hasPort
            }
        }
        @discardableResult
        public func setPort(_ value:Int32) -> LoginRequest.Builder {
            self.port = value
            return self
        }
        @discardableResult
        public func clearPort() -> LoginRequest.Builder{
            builderResult.hasPort = false
            builderResult.port = nil
            return self
        }
        /// iOS/Andoird
        public var deviceName:String {
            get {
                return builderResult.deviceName
            }
            set (value) {
                builderResult.hasDeviceName = true
                builderResult.deviceName = value
            }
        }
        public var hasDeviceName:Bool {
            get {
                return builderResult.hasDeviceName
            }
        }
        @discardableResult
        public func setDeviceName(_ value:String) -> LoginRequest.Builder {
            self.deviceName = value
            return self
        }
        @discardableResult
        public func clearDeviceName() -> LoginRequest.Builder{
            builderResult.hasDeviceName = false
            builderResult.deviceName = nil
            return self
        }
        /// 设备标识符
        public var deviceId:String {
            get {
                return builderResult.deviceId
            }
            set (value) {
                builderResult.hasDeviceId = true
                builderResult.deviceId = value
            }
        }
        public var hasDeviceId:Bool {
            get {
                return builderResult.hasDeviceId
            }
        }
        @discardableResult
        public func setDeviceId(_ value:String) -> LoginRequest.Builder {
            self.deviceId = value
            return self
        }
        @discardableResult
        public func clearDeviceId() -> LoginRequest.Builder{
            builderResult.hasDeviceId = false
            builderResult.deviceId = nil
            return self
        }
        /// 软件版本
        public var version:String {
            get {
                return builderResult.version
            }
            set (value) {
                builderResult.hasVersion = true
                builderResult.version = value
            }
        }
        public var hasVersion:Bool {
            get {
                return builderResult.hasVersion
            }
        }
        @discardableResult
        public func setVersion(_ value:String) -> LoginRequest.Builder {
            self.version = value
            return self
        }
        @discardableResult
        public func clearVersion() -> LoginRequest.Builder{
            builderResult.hasVersion = false
            builderResult.version = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> LoginRequest.Builder {
            builderResult = LoginRequest()
            return self
        }
        override public func clone() throws -> LoginRequest.Builder {
            return try LoginRequest.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> LoginRequest {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> LoginRequest {
            let returnMe:LoginRequest = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:LoginRequest) throws -> LoginRequest.Builder {
            if other == LoginRequest() {
                return self
            }
            if other.hasNickName {
                nickName = other.nickName
            }
            if other.hasPwd {
                pwd = other.pwd
            }
            if other.hasIp {
                ip = other.ip
            }
            if other.hasPort {
                port = other.port
            }
            if other.hasDeviceName {
                deviceName = other.deviceName
            }
            if other.hasDeviceId {
                deviceId = other.deviceId
            }
            if other.hasVersion {
                version = other.version
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> LoginRequest.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRequest.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    nickName = try codedInputStream.readString()

                case 18:
                    pwd = try codedInputStream.readString()

                case 26:
                    ip = try codedInputStream.readString()

                case 32:
                    port = try codedInputStream.readInt32()

                case 42:
                    deviceName = try codedInputStream.readString()

                case 50:
                    deviceId = try codedInputStream.readString()

                case 58:
                    version = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> LoginRequest.Builder {
            let resultDecodedBuilder = LoginRequest.Builder()
            if let jsonValueNickName = jsonMap["nickName"] as? String {
                resultDecodedBuilder.nickName = jsonValueNickName
            }
            if let jsonValuePwd = jsonMap["pwd"] as? String {
                resultDecodedBuilder.pwd = jsonValuePwd
            }
            if let jsonValueIp = jsonMap["ip"] as? String {
                resultDecodedBuilder.ip = jsonValueIp
            }
            if let jsonValuePort = jsonMap["port"] as? Int {
                resultDecodedBuilder.port = Int32(jsonValuePort)
            } else if let jsonValuePort = jsonMap["port"] as? String {
                resultDecodedBuilder.port = Int32(jsonValuePort)!
            }
            if let jsonValueDeviceName = jsonMap["deviceName"] as? String {
                resultDecodedBuilder.deviceName = jsonValueDeviceName
            }
            if let jsonValueDeviceId = jsonMap["deviceId"] as? String {
                resultDecodedBuilder.deviceId = jsonValueDeviceId
            }
            if let jsonValueVersion = jsonMap["version"] as? String {
                resultDecodedBuilder.version = jsonValueVersion
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> LoginRequest.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try LoginRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class LogoutRequest : GeneratedMessage {
    public typealias BuilderType = LogoutRequest.Builder

    public static func == (lhs: LogoutRequest, rhs: LogoutRequest) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUid == rhs.hasUid) && (!lhs.hasUid || lhs.uid == rhs.uid)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var uid:Int32! = nil
    public fileprivate(set) var hasUid:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUid {
            try codedOutputStream.writeInt32(fieldNumber: 1, value:uid)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUid {
            serialize_size += uid.computeInt32Size(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> LogoutRequest.Builder {
        return LogoutRequest.classBuilder() as! LogoutRequest.Builder
    }
    public func getBuilder() -> LogoutRequest.Builder {
        return classBuilder() as! LogoutRequest.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LogoutRequest.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LogoutRequest.Builder()
    }
    public func toBuilder() throws -> LogoutRequest.Builder {
        return try LogoutRequest.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:LogoutRequest) throws -> LogoutRequest.Builder {
        return try LogoutRequest.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUid {
            jsonMap["uid"] = Int(uid)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> LogoutRequest {
        return try LogoutRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> LogoutRequest {
        return try LogoutRequest.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUid {
            output += "\(indent) uid: \(uid) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUid {
                hashCode = (hashCode &* 31) &+ uid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "LogoutRequest"
    }
    override public func className() -> String {
        return "LogoutRequest"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:LogoutRequest = LogoutRequest()
        public func getMessage() -> LogoutRequest {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var uid:Int32 {
            get {
                return builderResult.uid
            }
            set (value) {
                builderResult.hasUid = true
                builderResult.uid = value
            }
        }
        public var hasUid:Bool {
            get {
                return builderResult.hasUid
            }
        }
        @discardableResult
        public func setUid(_ value:Int32) -> LogoutRequest.Builder {
            self.uid = value
            return self
        }
        @discardableResult
        public func clearUid() -> LogoutRequest.Builder{
            builderResult.hasUid = false
            builderResult.uid = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> LogoutRequest.Builder {
            builderResult = LogoutRequest()
            return self
        }
        override public func clone() throws -> LogoutRequest.Builder {
            return try LogoutRequest.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> LogoutRequest {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> LogoutRequest {
            let returnMe:LogoutRequest = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:LogoutRequest) throws -> LogoutRequest.Builder {
            if other == LogoutRequest() {
                return self
            }
            if other.hasUid {
                uid = other.uid
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> LogoutRequest.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LogoutRequest.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    uid = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> LogoutRequest.Builder {
            let resultDecodedBuilder = LogoutRequest.Builder()
            if let jsonValueUid = jsonMap["uid"] as? Int {
                resultDecodedBuilder.uid = Int32(jsonValueUid)
            } else if let jsonValueUid = jsonMap["uid"] as? String {
                resultDecodedBuilder.uid = Int32(jsonValueUid)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> LogoutRequest.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try LogoutRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

/// 注册成功 必须进行登录 统一返回uid token
final public class SiginResponse : GeneratedMessage {
    public typealias BuilderType = SiginResponse.Builder

    public static func == (lhs: SiginResponse, rhs: SiginResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUid == rhs.hasUid) && (!lhs.hasUid || lhs.uid == rhs.uid)
        fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var uid:UInt32! = nil
    public fileprivate(set) var hasUid:Bool = false

    public fileprivate(set) var token:String! = nil
    public fileprivate(set) var hasToken:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUid {
            try codedOutputStream.writeUInt32(fieldNumber: 1, value:uid)
        }
        if hasToken {
            try codedOutputStream.writeString(fieldNumber: 2, value:token)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUid {
            serialize_size += uid.computeUInt32Size(fieldNumber: 1)
        }
        if hasToken {
            serialize_size += token.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> SiginResponse.Builder {
        return SiginResponse.classBuilder() as! SiginResponse.Builder
    }
    public func getBuilder() -> SiginResponse.Builder {
        return classBuilder() as! SiginResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return SiginResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return SiginResponse.Builder()
    }
    public func toBuilder() throws -> SiginResponse.Builder {
        return try SiginResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:SiginResponse) throws -> SiginResponse.Builder {
        return try SiginResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUid {
            jsonMap["uid"] = UInt(uid)
        }
        if hasToken {
            jsonMap["token"] = token
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> SiginResponse {
        return try SiginResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> SiginResponse {
        return try SiginResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUid {
            output += "\(indent) uid: \(uid) \n"
        }
        if hasToken {
            output += "\(indent) token: \(token) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUid {
                hashCode = (hashCode &* 31) &+ uid.hashValue
            }
            if hasToken {
                hashCode = (hashCode &* 31) &+ token.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "SiginResponse"
    }
    override public func className() -> String {
        return "SiginResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:SiginResponse = SiginResponse()
        public func getMessage() -> SiginResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var uid:UInt32 {
            get {
                return builderResult.uid
            }
            set (value) {
                builderResult.hasUid = true
                builderResult.uid = value
            }
        }
        public var hasUid:Bool {
            get {
                return builderResult.hasUid
            }
        }
        @discardableResult
        public func setUid(_ value:UInt32) -> SiginResponse.Builder {
            self.uid = value
            return self
        }
        @discardableResult
        public func clearUid() -> SiginResponse.Builder{
            builderResult.hasUid = false
            builderResult.uid = nil
            return self
        }
        public var token:String {
            get {
                return builderResult.token
            }
            set (value) {
                builderResult.hasToken = true
                builderResult.token = value
            }
        }
        public var hasToken:Bool {
            get {
                return builderResult.hasToken
            }
        }
        @discardableResult
        public func setToken(_ value:String) -> SiginResponse.Builder {
            self.token = value
            return self
        }
        @discardableResult
        public func clearToken() -> SiginResponse.Builder{
            builderResult.hasToken = false
            builderResult.token = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> SiginResponse.Builder {
            builderResult = SiginResponse()
            return self
        }
        override public func clone() throws -> SiginResponse.Builder {
            return try SiginResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> SiginResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> SiginResponse {
            let returnMe:SiginResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:SiginResponse) throws -> SiginResponse.Builder {
            if other == SiginResponse() {
                return self
            }
            if other.hasUid {
                uid = other.uid
            }
            if other.hasToken {
                token = other.token
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> SiginResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SiginResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    uid = try codedInputStream.readUInt32()

                case 18:
                    token = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> SiginResponse.Builder {
            let resultDecodedBuilder = SiginResponse.Builder()
            if let jsonValueUid = jsonMap["uid"] as? UInt {
                resultDecodedBuilder.uid = UInt32(jsonValueUid)
            } else if let jsonValueUid = jsonMap["uid"] as? String {
                resultDecodedBuilder.uid = UInt32(jsonValueUid)!
            }
            if let jsonValueToken = jsonMap["token"] as? String {
                resultDecodedBuilder.token = jsonValueToken
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> SiginResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try SiginResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class LoginResponse : GeneratedMessage {
    public typealias BuilderType = LoginResponse.Builder

    public static func == (lhs: LoginResponse, rhs: LoginResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUid == rhs.hasUid) && (!lhs.hasUid || lhs.uid == rhs.uid)
        fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var uid:UInt32! = nil
    public fileprivate(set) var hasUid:Bool = false

    public fileprivate(set) var token:String! = nil
    public fileprivate(set) var hasToken:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUid {
            try codedOutputStream.writeUInt32(fieldNumber: 1, value:uid)
        }
        if hasToken {
            try codedOutputStream.writeString(fieldNumber: 2, value:token)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUid {
            serialize_size += uid.computeUInt32Size(fieldNumber: 1)
        }
        if hasToken {
            serialize_size += token.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> LoginResponse.Builder {
        return LoginResponse.classBuilder() as! LoginResponse.Builder
    }
    public func getBuilder() -> LoginResponse.Builder {
        return classBuilder() as! LoginResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LoginResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return LoginResponse.Builder()
    }
    public func toBuilder() throws -> LoginResponse.Builder {
        return try LoginResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:LoginResponse) throws -> LoginResponse.Builder {
        return try LoginResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUid {
            jsonMap["uid"] = UInt(uid)
        }
        if hasToken {
            jsonMap["token"] = token
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> LoginResponse {
        return try LoginResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> LoginResponse {
        return try LoginResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUid {
            output += "\(indent) uid: \(uid) \n"
        }
        if hasToken {
            output += "\(indent) token: \(token) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUid {
                hashCode = (hashCode &* 31) &+ uid.hashValue
            }
            if hasToken {
                hashCode = (hashCode &* 31) &+ token.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "LoginResponse"
    }
    override public func className() -> String {
        return "LoginResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:LoginResponse = LoginResponse()
        public func getMessage() -> LoginResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var uid:UInt32 {
            get {
                return builderResult.uid
            }
            set (value) {
                builderResult.hasUid = true
                builderResult.uid = value
            }
        }
        public var hasUid:Bool {
            get {
                return builderResult.hasUid
            }
        }
        @discardableResult
        public func setUid(_ value:UInt32) -> LoginResponse.Builder {
            self.uid = value
            return self
        }
        @discardableResult
        public func clearUid() -> LoginResponse.Builder{
            builderResult.hasUid = false
            builderResult.uid = nil
            return self
        }
        public var token:String {
            get {
                return builderResult.token
            }
            set (value) {
                builderResult.hasToken = true
                builderResult.token = value
            }
        }
        public var hasToken:Bool {
            get {
                return builderResult.hasToken
            }
        }
        @discardableResult
        public func setToken(_ value:String) -> LoginResponse.Builder {
            self.token = value
            return self
        }
        @discardableResult
        public func clearToken() -> LoginResponse.Builder{
            builderResult.hasToken = false
            builderResult.token = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> LoginResponse.Builder {
            builderResult = LoginResponse()
            return self
        }
        override public func clone() throws -> LoginResponse.Builder {
            return try LoginResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> LoginResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> LoginResponse {
            let returnMe:LoginResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:LoginResponse) throws -> LoginResponse.Builder {
            if other == LoginResponse() {
                return self
            }
            if other.hasUid {
                uid = other.uid
            }
            if other.hasToken {
                token = other.token
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> LoginResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    uid = try codedInputStream.readUInt32()

                case 18:
                    token = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> LoginResponse.Builder {
            let resultDecodedBuilder = LoginResponse.Builder()
            if let jsonValueUid = jsonMap["uid"] as? UInt {
                resultDecodedBuilder.uid = UInt32(jsonValueUid)
            } else if let jsonValueUid = jsonMap["uid"] as? String {
                resultDecodedBuilder.uid = UInt32(jsonValueUid)!
            }
            if let jsonValueToken = jsonMap["token"] as? String {
                resultDecodedBuilder.token = jsonValueToken
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> LoginResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try LoginResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension UserMsg: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<UserMsg> {
        var mergedArray = Array<UserMsg>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> UserMsg? {
        return try UserMsg.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserMsg {
        return try UserMsg.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "cmd": return self.cmd
        case "body": return self.body
        default: return nil
        }
    }
}
extension UserMsg.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = UserMsg
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "cmd": return self.cmd
            case "body": return self.body
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "cmd":
                guard let newSubscriptValue = newSubscriptValue as? UserCmd else {
                    return
                }
                self.cmd = newSubscriptValue
            case "body":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.body = newSubscriptValue
            default: return
            }
        }
    }
}
extension SigninRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<SigninRequest> {
        var mergedArray = Array<SigninRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> SigninRequest? {
        return try SigninRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> SigninRequest {
        return try SigninRequest.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> SigninRequest {
        return try SigninRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> SigninRequest {
        return try SigninRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> SigninRequest {
        return try SigninRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> SigninRequest {
        return try SigninRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SigninRequest {
        return try SigninRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "nickName": return self.nickName
        case "pwd": return self.pwd
        default: return nil
        }
    }
}
extension SigninRequest.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = SigninRequest
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "nickName": return self.nickName
            case "pwd": return self.pwd
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "nickName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nickName = newSubscriptValue
            case "pwd":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.pwd = newSubscriptValue
            default: return
            }
        }
    }
}
extension LoginRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<LoginRequest> {
        var mergedArray = Array<LoginRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> LoginRequest? {
        return try LoginRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> LoginRequest {
        return try LoginRequest.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> LoginRequest {
        return try LoginRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> LoginRequest {
        return try LoginRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRequest {
        return try LoginRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> LoginRequest {
        return try LoginRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRequest {
        return try LoginRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "nickName": return self.nickName
        case "pwd": return self.pwd
        case "ip": return self.ip
        case "port": return self.port
        case "deviceName": return self.deviceName
        case "deviceId": return self.deviceId
        case "version": return self.version
        default: return nil
        }
    }
}
extension LoginRequest.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = LoginRequest
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "nickName": return self.nickName
            case "pwd": return self.pwd
            case "ip": return self.ip
            case "port": return self.port
            case "deviceName": return self.deviceName
            case "deviceId": return self.deviceId
            case "version": return self.version
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "nickName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nickName = newSubscriptValue
            case "pwd":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.pwd = newSubscriptValue
            case "ip":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.ip = newSubscriptValue
            case "port":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.port = newSubscriptValue
            case "deviceName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.deviceName = newSubscriptValue
            case "deviceId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.deviceId = newSubscriptValue
            case "version":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.version = newSubscriptValue
            default: return
            }
        }
    }
}
extension LogoutRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<LogoutRequest> {
        var mergedArray = Array<LogoutRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> LogoutRequest? {
        return try LogoutRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> LogoutRequest {
        return try LogoutRequest.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> LogoutRequest {
        return try LogoutRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> LogoutRequest {
        return try LogoutRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> LogoutRequest {
        return try LogoutRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> LogoutRequest {
        return try LogoutRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LogoutRequest {
        return try LogoutRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uid": return self.uid
        default: return nil
        }
    }
}
extension LogoutRequest.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = LogoutRequest
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uid": return self.uid
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uid":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.uid = newSubscriptValue
            default: return
            }
        }
    }
}
extension SiginResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<SiginResponse> {
        var mergedArray = Array<SiginResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> SiginResponse? {
        return try SiginResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> SiginResponse {
        return try SiginResponse.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> SiginResponse {
        return try SiginResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> SiginResponse {
        return try SiginResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> SiginResponse {
        return try SiginResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> SiginResponse {
        return try SiginResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SiginResponse {
        return try SiginResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uid": return self.uid
        case "token": return self.token
        default: return nil
        }
    }
}
extension SiginResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = SiginResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uid": return self.uid
            case "token": return self.token
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uid":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.uid = newSubscriptValue
            case "token":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.token = newSubscriptValue
            default: return
            }
        }
    }
}
extension LoginResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<LoginResponse> {
        var mergedArray = Array<LoginResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> LoginResponse? {
        return try LoginResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> LoginResponse {
        return try LoginResponse.Builder().mergeFrom(data: data, extensionRegistry:UserRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> LoginResponse {
        return try LoginResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> LoginResponse {
        return try LoginResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> LoginResponse {
        return try LoginResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> LoginResponse {
        return try LoginResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginResponse {
        return try LoginResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uid": return self.uid
        case "token": return self.token
        default: return nil
        }
    }
}
extension LoginResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = LoginResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uid": return self.uid
            case "token": return self.token
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uid":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.uid = newSubscriptValue
            case "token":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.token = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
